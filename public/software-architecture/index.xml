<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Knowledgebase</title>
    <link>http://localhost:1313/software-architecture/</link>
    <description>Recent content on Knowledgebase</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/software-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/application-architecture/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/application-architecture/readme/</guid>
      <description>&lt;h1 id=&#34;application-architecture&#34;&gt;&#xA;  Application Architecture&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#application-architecture&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;ideas&#34;&gt;&#xA;  Ideas&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ideas&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Introduction to Application Architecture:&lt;/p&gt;&#xA;&lt;p&gt;The essence and importance of application architecture&#xA;Role of an application architect&#xA;Historical perspective: Monolithic to microservices and beyond&#xA;Architectural Patterns &amp;amp; Styles:&lt;/p&gt;&#xA;&lt;p&gt;Layered (n-tier) architecture&#xA;Event-driven architecture (EDA)&#xA;Microservices architecture&#xA;Service-oriented architecture (SOA)&#xA;Domain-driven design (DDD)&#xA;Model-View-Controller (MVC), Model-View-ViewModel (MVVM), and other design patterns&#xA;Component-Based Design:&lt;/p&gt;&#xA;&lt;p&gt;Modular development&#xA;Design principles: SOLID, DRY, etc.&#xA;Designing for reusability and maintainability&#xA;Scalability &amp;amp; Performance:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/architecture-characteristics/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/architecture-characteristics/readme/</guid>
      <description>&lt;h1 id=&#34;architecture-characteristics&#34;&gt;&#xA;  Architecture Characteristics&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-characteristics&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The software development process has many techniques for (functional) requirement gathering. Mostly functional. As architect, one must consider many other factors in addition to those requirements that are not directly related to the domain functionality.&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;&#xA;  Description&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The important aspects of the system, independent of the problem domain.&lt;/p&gt;&#xA;&lt;p&gt;Characteristics describe our desired behavior of a system across different dimensions. it is important to understand the desired characteristics and to make an explicit commitment to them. A system must not comply or concern itself about all the possible Architecture Characteristics that we can think of, cause for each system, this will differ.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/architecture-styles/ball-of-mud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/architecture-styles/ball-of-mud/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;./readme.md&#34;&gt;&amp;laquo; Back To Overview&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;architecture-style-ball-of-mud&#34;&gt;&#xA;  Architecture Style: Ball Of Mud&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-style-ball-of-mud&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://deviq.com/static/bbadac1df808c8af3ce29b22f2f7a5e8/08b4d/big-ball-of-mud-survivor.webp&#34; alt=&#34;Ball Of Mud&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;&#xA;  Description&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The Ball Of Mud is rather placeholder for the lack of architecture, resulting in a mess, lack of consistent application of patterns and a bunch of anti patterns. Spaghetti code call it, a ball of hair. Just plain chaos. This is usually the result due to lack of planning, vision and/or governance. &lt;strong&gt;It goes without saying that one never should aim for this architectural style.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/architecture-styles/event-driven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/architecture-styles/event-driven/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;./readme.md&#34;&gt;&amp;laquo; Back To Overview&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;architecture-style-event-driven&#34;&gt;&#xA;  Architecture Style: Event-Driven&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-style-event-driven&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://fundamentalsofsoftwarearchitecture.com/images/book/fosa_1401.png&#34; alt=&#34;Event-Driven Architecture Style Image&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;&#xA;  Description&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Made up of decoupled event processing components that asynchronously receive and process events.&#xA;This architectural style can be used standalone or embedded with other architectural styles.&lt;/p&gt;&#xA;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xA;  &lt;p&gt;There is a difference between the architectural style of pure &amp;ldquo;Event-Driven&amp;rdquo; and events and event sourcing in general. Therefore, for more information specific to events and not the specific architectural style. See &lt;a href=&#34;../integration-architecture/events/readme.md&#34;&gt;Integration Architecture &amp;gt; events&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/architecture-styles/layered/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/architecture-styles/layered/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;./readme.md&#34;&gt;&amp;laquo; Back To Overview&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;architecture-style-layered&#34;&gt;&#xA;  Architecture Style: Layered&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-style-layered&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://fundamentalsofsoftwarearchitecture.com/images/book/fosa_1001.png&#34; alt=&#34;Layered Architecture Style Image&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Alternative names: n-tier architecture&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;&#xA;  Description&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;When we talk about &amp;ldquo;A monolith&amp;rdquo; most people will be referring to the layered architecture style. Although not entirely wrong, there are some other architectural styles which are categorized as monolith. See the &lt;a href=&#34;./readme.md&#34;&gt;architectural styles overview&lt;/a&gt; for more.&lt;/p&gt;&#xA;&lt;p&gt;The layered approach is perfect for small, simple applications like web applications. Code is partitioned from a technical view. All code of the presentation layer goes into the presentation layer, disregarding the domain or entity it relates to.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/architecture-styles/microkernel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/architecture-styles/microkernel/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;./readme.md&#34;&gt;&amp;laquo; Back To Overview&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;architecture-style-microkernel&#34;&gt;&#xA;  Architecture Style: Microkernel&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-style-microkernel&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://fundamentalsofsoftwarearchitecture.com/images/book/fosa_1201.png&#34; alt=&#34;Microkernel Architecture Style Image&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Alternative names: plug-in architecture&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;&#xA;  Description&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A natural fit for product applications that one can download and install as a single (monolithic) installation, but also used in many non-product business applications. Some programming frameworks or programming tools tend to use this also.&lt;/p&gt;&#xA;&lt;p&gt;There are 2 components, the &lt;strong&gt;core system&lt;/strong&gt; and the &lt;strong&gt;plug-in&lt;/strong&gt; components. All application logic is divided between independent plug-in components and the basic core system, providing extensibility, adaptability, and isolation of application features and custom processing logic.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/architecture-styles/microservices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/architecture-styles/microservices/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;./readme.md&#34;&gt;&amp;laquo; Back To Overview&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;architecture-style-microservices&#34;&gt;&#xA;  Architecture Style: Microservices&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-style-microservices&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://fundamentalsofsoftwarearchitecture.com/images/book/fosa_1701.png&#34; alt=&#34;Microservices Architecture Style Image&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;&#xA;  Description&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Was named and use popularized by &lt;a href=&#34;https://martinfowler.com/articles/microservices.html&#34;&gt;a blog post from Martin Fowler and James Lewis&lt;/a&gt;. The microservices style is heavily inspired on Domain-Driven-Design (DDD). The concept of &lt;strong&gt;Bounded Context&lt;/strong&gt; (from DDD) was a decisive inspiration, which represents a decoupling style. The goal of microservices is high decoupling, physically modeling the logical notion of bounded context.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/architecture-styles/orchestration-driven-service-oriented/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/architecture-styles/orchestration-driven-service-oriented/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;./readme.md&#34;&gt;&amp;laquo; Back To Overview&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;architecture-style-orchestration-driven-service-oriented&#34;&gt;&#xA;  Architecture Style: Orchestration-Driven Service-Oriented&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-style-orchestration-driven-service-oriented&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://fundamentalsofsoftwarearchitecture.com/images/book/fosa_1601.png&#34; alt=&#34;Orchestration-Driven Service-Oriented Architecture Style Image&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;&#xA;  Description&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;topology&#34;&gt;&#xA;  Topology&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#topology&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Business Services&lt;/strong&gt;: Sit on top of the architecture and are the entry point. These services did not contain code, just input, output, and sometimes schema information.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Examples: &lt;code&gt;ExecuteTrade&lt;/code&gt;, &lt;code&gt;PlaceOrder&lt;/code&gt; (&amp;ldquo;Are we in the business of&amp;hellip;&amp;rdquo; as guiding principle)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Enterprise Services&lt;/strong&gt;: Fine-grained, shared implementations. Highly specialized atomic building blocks for the coarse-grained business services. These are tied together via the orchestration engine. Given a good collection of reusable enterprise services, one could easily change any business process. Composition was the goal.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Examples: &lt;code&gt;CreateCustomer&lt;/code&gt;, &lt;code&gt;CalculateQuote&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Concerns: Dynamic nature of reality defies these attempts (Business Components are not static, solutions change, markets change, technologies change)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Application Services&lt;/strong&gt;: One-off, single-implementations, a service that would be used only once. So  you don&amp;rsquo;t invest on making it reusable.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Examples: &lt;code&gt;GeoLocationService&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Infrastructure Services&lt;/strong&gt;: Operational services like monitoring, logging and such.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Orchestration Engine&lt;/strong&gt;:  Heart of the architecture. Stitching business service implementations together using orchestration of the Enterprise Services basically. The database usually was one shared one. This acts an an integration hub.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Message Flow&lt;/strong&gt;: All requests flow through the orchestration engine, cause the logic of the architecture lives here.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;why-its-bad&#34;&gt;&#xA;  Why It&amp;rsquo;s bad&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#why-its-bad&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;p&gt;This is a historical &lt;strong&gt;anti-pattern architectural style&lt;/strong&gt; which is worth documenting as one might find these in the wild. It helps to understand historically why the emerged, why they were made, and why it made sense at that point in time. We can also draw some insights from this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/architecture-styles/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/architecture-styles/pipeline/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;./readme.md&#34;&gt;&amp;laquo; Back To Overview&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;architecture-style-pipeline&#34;&gt;&#xA;  Architecture Style: Pipeline&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-style-pipeline&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://fundamentalsofsoftwarearchitecture.com/images/book/fosa_1101.png&#34; alt=&#34;Pipeline Architecture Style Image&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Alternative names: Pipes and filters&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;&#xA;  Description&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Known as the underlying principle behind Unix terminal shell languages, those who dabble in functional programming will also see parallel&amp;rsquo;s. MapReduce is also a popular concept following this style. An entire &lt;strong&gt;process&lt;/strong&gt; is built up from pipes and filters to deliver a certain functionality.&lt;/p&gt;&#xA;&lt;p&gt;The power of &lt;strong&gt;composition&lt;/strong&gt; is key in this architectural style.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/architecture-styles/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/architecture-styles/readme/</guid>
      <description>&lt;h1 id=&#34;architecture-styles&#34;&gt;&#xA;  Architecture Styles&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-styles&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Architecture styles can be use for the architecture of a whole system, but these styles can be also combined. One does not exclude the use of others.&lt;/p&gt;&#xA;&lt;p&gt;As per usual, you need to select the style(s) based on your needs. Remember, as an architect, you must understand your needs for the system.&lt;/p&gt;&#xA;&lt;h2 id=&#34;monolithic-vs-distributed-architectures&#34;&gt;&#xA;  Monolithic vs Distributed Architectures&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#monolithic-vs-distributed-architectures&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Neither is better than the other, each answers a specific set of needs. The fundamental decision rests on how many &lt;a href=&#34;../architecture-characteristics/readme.md#architectural-quanta&#34;&gt;quanta&lt;/a&gt; the architect discovers during the design process. If the system can manage with a single quantum (in other words, one set or architecture characteristics), then a monolithic architecture offers many advantages. On the other hand, differing architecture characteristics for components requires distributed architecture to accommodate the differing architecture characteristics.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/architecture-styles/service-based/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/architecture-styles/service-based/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;./readme.md&#34;&gt;&amp;laquo; Back To Overview&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;architecture-style-service-based&#34;&gt;&#xA;  Architecture Style: Service-Based&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-style-service-based&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://fundamentalsofsoftwarearchitecture.com/images/book/fosa_1301.png&#34; alt=&#34;Service-Based Architecture Style Image&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;&#xA;  Description&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Is a &amp;ldquo;hybrid&amp;rdquo; of the microservices architecture style. It&amp;rsquo;s very pragmatic, flexible, but has one of the lowest complexity and cost of all distributed architecture style, making it a popular choice for business-related applications.&lt;/p&gt;&#xA;&lt;p&gt;Basic topology of service-based architecture follows a distributed macro layered structure, consisting of a separately deployed user interface, distinct services, and a monolithic database. Services in this architecture are usually &amp;ldquo;domain services&amp;rdquo;, covering a specific part of the general domain. All services are independent and separately deployed.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/architecture-styles/space-based/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/architecture-styles/space-based/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;./readme.md&#34;&gt;&amp;laquo; Back To Overview&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;architecture-style-space-based&#34;&gt;&#xA;  Architecture Style: Space-Based&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-style-space-based&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://fundamentalsofsoftwarearchitecture.com/images/book/fosa_1502.png&#34; alt=&#34;Space-Based Architecture Style Image&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;&#xA;  Description&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This architectural style comes from the notion that in &lt;a href=&#34;https://fundamentalsofsoftwarearchitecture.com/images/book/fosa_1501.png&#34;&gt;traditional web faced applications&lt;/a&gt;, the database is the ultimate bottleneck which is expensive and complex. When a load of traffic comes in, one would first scale the web servers, afterwards the application servers and last the database servers. So we just move the scaling issue from the front tier to the database tier. For many systems this might not be a real concern, however high-volume applications with large concurrent user load will ultimately run into the database limitations.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/blog-ideas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/blog-ideas/</guid>
      <description>&lt;h1 id=&#34;blog-ideas&#34;&gt;&#xA;  Blog Ideas&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#blog-ideas&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Shortlist of ideas on what to write or blog about.&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-components-of-systems-and-where-we-find-these-similarities&#34;&gt;&#xA;  Key Components of systems and where we find these similarities.&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-components-of-systems-and-where-we-find-these-similarities&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Systems have componenents/sub systems, and the communication between each of those is relevant. We do this in architecture, in Team topologies we see the same analogy. We identify systems, and teams which are sub systems on their own, and we talk also on the communication channels.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;System&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/data-architecture/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/data-architecture/readme/</guid>
      <description>&lt;h1 id=&#34;data-architecture&#34;&gt;&#xA;  Data Architecture&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#data-architecture&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;ideas&#34;&gt;&#xA;  Ideas&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ideas&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Data Mesh&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Introduction to Data Architecture:&lt;/p&gt;&#xA;&lt;p&gt;Definition and significance of data architecture&#xA;Role and responsibilities of a data architect&#xA;Historical evolution: Traditional databases to big data and beyond&#xA;Foundational Data Concepts:&lt;/p&gt;&#xA;&lt;p&gt;Data models: relational, hierarchical, network, object-oriented, etc.&#xA;Data schemas: star schema, snowflake schema, and galaxy schema&#xA;Data normalization and denormalization&#xA;Relational Databases &amp;amp; SQL:&lt;/p&gt;&#xA;&lt;p&gt;Basics of relational databases&#xA;SQL (Structured Query Language) deep dive&#xA;ACID properties (Atomicity, Consistency, Isolation, Durability)&#xA;NoSQL Databases:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/integration-architecture/events/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/integration-architecture/events/readme/</guid>
      <description>&lt;h1 id=&#34;events-and-event-sourcing&#34;&gt;&#xA;  Events and Event Sourcing&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#events-and-event-sourcing&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xA;  &lt;p&gt;This section goes deeper into events, event-sourcing, and related topics. If you want to know more about the architectural style &amp;ldquo;Event-Driven&amp;rdquo; that strongly leans on events, see the &lt;a href=&#34;../../architecture-styles/event-driven.md&#34;&gt;Event-Driven Architectural Style&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&lt;h2 id=&#34;events-vs-event-sourcing&#34;&gt;&#xA;  Events vs Event Sourcing&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#events-vs-event-sourcing&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Events are used as a method of communication between different parts of a system. An event is a significant change in state or an important occurrence that other parts of the system might need to know about. Event sourcing is a design pattern where the state of a business entity is persisted as a sequence of state-changing events. Whenever the state of a business entity changes, a new event is appended to the list of events.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/integration-architecture/events/versioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/integration-architecture/events/versioning/</guid>
      <description>&lt;h1 id=&#34;event-versioning&#34;&gt;&#xA;  Event Versioning&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#event-versioning&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;why&#34;&gt;&#xA;  Why?&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#why&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;To avoid big bang releases.&lt;/p&gt;&#xA;&lt;h2 id=&#34;rules&#34;&gt;&#xA;  Rules&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rules&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A new version of an event must be convertible from the old version of the event. If not, it is not a new version of the event but rather a new event.d)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Any version of any event should be convertible from any version of a given event. If you find yourself trying to figure out how to convert your old event (Evil Kinevil jumping over a school bus on a motorcycle) to your new version of the event (a monkey eating a banana) and you can’t, this is because you have a new event and not a new version of it.&lt;/li&gt;&#xA;&lt;li&gt;Following this rule you can always upcast.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;At any given point in time, you must only handle the version of the event you understand and ignore all others (to allow for Double Writes, so old and new version is published).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For most systems, a simple human-readable format such as json is fine for handling messages. Most production systems use mapping with either XML or json. Mapping with weak-schema will also remove many of the versioning problems associated with type-based strong schema discussed in the previous chapter.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/integration-architecture/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/integration-architecture/readme/</guid>
      <description>&lt;h1 id=&#34;integration-architecture&#34;&gt;&#xA;  Integration Architecture&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#integration-architecture&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;topics&#34;&gt;&#xA;  Topics&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#topics&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./events/readme.md&#34;&gt;Events &amp;amp; Event Sourcing&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ideas-to-cover&#34;&gt;&#xA;  Ideas To cover&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ideas-to-cover&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    * Service Mesh&#xA;    * Event driven&#xA;    * Request-Reply&#xA;    * ...&#xA;&#xA;    Introduction to Integration Architecture:&#xA;&#xA;    Definition and importance&#xA;    Historical context: From monolithic to modular to microservices and beyond&#xA;    Types of Integration:&#xA;&#xA;    Point-to-point vs. hub-and-spoke&#xA;    Batch integration&#xA;    Real-time integration&#xA;    Synchronous vs. asynchronous communication&#xA;    Integration Patterns and Styles:&#xA;&#xA;    Enterprise Integration Patterns (EIP) – e.g., Message Broker, Publish/Subscribe, Dead Letter Channel, etc.&#xA;    Integration styles: Database, File transfer, Shared API, Messaging, etc.&#xA;    Service-oriented architecture (SOA) and event-driven architecture (EDA)&#xA;    APIs &amp;amp; Services:&#xA;&#xA;    REST, SOAP, GraphQL&#xA;    API Gateways and Management&#xA;    Versioning strategies&#xA;    OAuth, JWT, and API security&#xA;    Middleware &amp;amp; Brokers:&#xA;&#xA;    Message queues (e.g., RabbitMQ, Kafka)&#xA;    Enterprise service bus (ESB)&#xA;    Integration Platforms as a Service (iPaaS)&#xA;    Service Mesh:&#xA;&#xA;    Introduction to Service Mesh&#xA;    Implementations like Istio, Linkerd, and Consul Connect&#xA;    Use cases, benefits, and drawbacks&#xA;    Data Integration:&#xA;&#xA;    ETL (Extract, Transform, Load) processes&#xA;    ELT (Extract, Load, Transform) processes&#xA;    Data lakes, data warehouses, and data hubs&#xA;    Streaming data and real-time analytics&#xA;    Integration Security:&#xA;&#xA;    Secure data transmission&#xA;    Data masking and tokenization&#xA;    Identity and access management in integration contexts&#xA;    Monitoring, Logging, and Tracing:&#xA;&#xA;    Importance of observability in integration scenarios&#xA;    Tools and practices for monitoring integrated systems&#xA;    Distributed tracing (e.g., Jaeger, Zipkin)&#xA;    Event Sourcing and CQRS (Command Query Responsibility Segregation):&#xA;&#xA;    Concepts and benefits&#xA;    Implementation strategies and considerations&#xA;    Containerization &amp;amp; Orchestration:&#xA;    Docker, Kubernetes, and their role in integration&#xA;    Service discovery and scaling in microservices environments&#xA;    Integration Testing:&#xA;    Contract testing&#xA;    End-to-end testing strategies&#xA;    Mocking and stubbing external systems&#xA;    Architecture Documentation and Standards:&#xA;    Documenting integration points, flows, and dependencies&#xA;    Establishing and enforcing integration standards and best practices&#xA;    Future Trends &amp;amp; Emerging Technologies:&#xA;    Serverless architectures and their impact on integration&#xA;    Edge computing and integration&#xA;    AI/ML in integration scenarios&#xA;    Case Studies and Real-world Examples:&#xA;    Discussing real-world integration challenges and solutions&#xA;    Lessons learned from successful and failed integrations&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/nuggets-of-wisdom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/nuggets-of-wisdom/</guid>
      <description>&lt;h1 id=&#34;nuggets-of-wisdom&#34;&gt;&#xA;  Nuggets Of Wisdom&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nuggets-of-wisdom&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xA;  &lt;p&gt;When a team builds a system primarily around reuse, they also incur a huge amount of coupling between components.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&lt;ul&gt;&#xA;&lt;li&gt;Source: &lt;a href=&#34;https://fundamentalsofsoftwarearchitecture.com/&#34;&gt;Fundamentals of Software Architecture&lt;/a&gt; - Chapter 16, p241&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xA;  &lt;p&gt;When an architect designs a system that favors reuse, they also favor coupling to achieve that reuse, either by inheritance or composition.&#xA;However; if the architect&amp;rsquo;s goal requires high degrees of decoupling,then they favor duplication over reuse.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/resources/</guid>
      <description>&lt;h1 id=&#34;resources&#34;&gt;&#xA;  Resources&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#resources&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;websites&#34;&gt;&#xA;  Websites&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#websites&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.datamesh-architecture.com/&#34;&gt;https://www.datamesh-architecture.com/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.developertoarchitect.com/&#34;&gt;https://www.developertoarchitect.com/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/architecture/&#34;&gt;https://martinfowler.com/architecture/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/architecture/&#34;&gt;Azure Architecture Center&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bytebytego.com/&#34;&gt;ByteByteGo&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Checklist_Manifesto&#34;&gt;Checklist Manifesto&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://tag-app-delivery.cncf.io/whitepapers/platform-eng-maturity-model/&#34;&gt;Platform Engineering Maturity Model&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://abseil.io/resources/swe-book/html/toc.html&#34;&gt;Software Engineering At Google&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;articlesblogpostswhitepaperstools&#34;&gt;&#xA;  Articles/Blog/Posts/Whitepapers/Tools&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#articlesblogpostswhitepaperstools&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;Note: I list only Articles/Blog/Posts that I have read and appreciate&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nealford.com/katas/&#34;&gt;Architecture Katas&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mattwynne.net/cognitive-load-for-knowledge-work&#34;&gt;Cognitive Load Types&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.melconway.com/Home/Committees_Paper.html&#34;&gt;Conway Law: Whitepaper&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://event-driven.io/en/how_to_do_event_versioning/&#34;&gt;How (not) to do event versioning&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/how-choose-microservices-boundaries-denis-baltor/&#34;&gt;How To Choose Microservice boundaries&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/ieeeSoftware/whoNeedsArchitect.pdf&#34;&gt;Who needs an architect? (Martin Fowler)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.reactivemanifesto.org/&#34;&gt;Reactive Manifesto&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./attachments/whitepaper-data-consistency-baseball.pdf&#34;&gt;Replicated Data Consistency Explained Through Baseball&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./attachments/whitepaper-sagas.pdf&#34;&gt;Saga Pattern Whitepaper&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/ieeeSoftware/enterpriseArchitects.pdf&#34;&gt;Enterprise Architects Join the Team (Rebecca J. Parson)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/articles/ea-in-lean-enterprise.html&#34;&gt;EA in the Lean Enterprise&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.serverlessadvocate.com/serverless-clean-architecture-code-with-domain-driven-design-852796846d28&#34;&gt;Serverless and Clean Architecture&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leanpub.com/esversioning/read&#34;&gt;Versioning in Event Driven Architectures (Book)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://eventmodeling.org/posts/what-is-event-modeling/&#34;&gt;What is Event Modelling&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://janbosch.com/blog/index.php/2017/11/25/structure-eats-strategy/&#34;&gt;Structure Eats Strategy - BAPO Model&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;recommended-books&#34;&gt;&#xA;  Recommended Books&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#recommended-books&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;Note: I list only books that I have read and appreciate&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/thought-leaders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/thought-leaders/</guid>
      <description>&lt;h1 id=&#34;thought-leaders&#34;&gt;&#xA;  Thought Leaders&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#thought-leaders&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;In alphabetical order&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;gregor-hohpe&#34;&gt;&#xA;  Gregor Hohpe&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gregor-hohpe&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Website: &lt;a href=&#34;https://www.enterpriseintegrationpatterns.com&#34;&gt;enterpriseintegrationpatterns.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Author of &lt;strong&gt;many&lt;/strong&gt; &lt;a href=&#34;https://www.enterpriseintegrationpatterns.com/books1.html&#34;&gt;books&lt;/a&gt; like &lt;a href=&#34;https://www.amazon.com/o/asin/0321200683/ref=nosim/enterpriseint-20&#34;&gt;Enterprise Integration Patterns&lt;/a&gt; and &lt;a href=&#34;https://www.amazon.com/gp/product/1492077542/ref=as_li_tl&#34;&gt;The Software Architect Elevator&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;mark-richards&#34;&gt;&#xA;  Mark Richards&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mark-richards&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Website: &lt;a href=&#34;https://www.developertoarchitect.com/mark-richards.html&#34;&gt;developertoarchitect.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Author of  &lt;strong&gt;many&lt;/strong&gt; &lt;a href=&#34;https://www.developertoarchitect.com/books.html&#34;&gt;books&lt;/a&gt; like &lt;a href=&#34;https://www.amazon.com/Things-Every-Software-Architect-Should/dp/059652269X&#34;&gt;97 Things Every Software Architect Should Know&lt;/a&gt;, &lt;a href=&#34;https://fundamentalsofsoftwarearchitecture.com/&#34;&gt;Fundamentals of Software Architecture&lt;/a&gt;, and &lt;a href=&#34;https://architecturethehardparts.com/&#34;&gt;Software Architecture: The Hard Parts&lt;/a&gt;.&#xA;He works for the infamous ThoughtWorks which has many thought leaders and relevant authors on its payroll.&lt;/p&gt;&#xA;&lt;h2 id=&#34;martin-fowler&#34;&gt;&#xA;  Martin Fowler&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#martin-fowler&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Website: &lt;a href=&#34;https://martinfowler.com/&#34;&gt;martinfowler.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Wiki: &lt;a href=&#34;https://en.wikipedia.org/wiki/Martin_Fowler_%28software_engineer%29&#34;&gt;https://en.wikipedia.org/wiki/Martin_Fowler_(software_engineer)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Author of many &lt;a href=&#34;https://martinfowler.com/books/&#34;&gt;books&lt;/a&gt; like &lt;a href=&#34;https://martinfowler.com/books/eaa.html&#34;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;, &lt;a href=&#34;https://martinfowler.com/books/refactoring.html&#34;&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt; and &lt;a href=&#34;https://martinfowler.com/books/uml.html&#34;&gt;UML Distilled: A Brief Guide to the Standard Object Modeling Language&lt;/a&gt;.&#xA;He works for the infamous ThoughtWorks which has many thought leaders and relevant authors on its payroll.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/todo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/todo/</guid>
      <description>&lt;h2 id=&#34;topics-to-cover---aka-the-todo&#34;&gt;&#xA;  Topics to cover - AKA THE TODO&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#topics-to-cover---aka-the-todo&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;What is Software Enterprise Architecture&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;How to get &amp;ldquo;TRUST&amp;rdquo; from the engineering team, and how to measure it (doing surveys for example)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;How to get architecture in the &amp;ldquo;AGILE&amp;rdquo; or &amp;ldquo;SAFE&amp;rdquo; ecosystem ?&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;How to get architecture adapted all together&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Where/how does &amp;ldquo;clean Architecture&amp;rdquo; fit in ?&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Make a good split and difference between architecture and enterprise architecture&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Consider on how to discuss the points of Software Architecture and the hard parts book&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/anti-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/anti-patterns/</guid>
      <description>&lt;h1 id=&#34;general-anti-patterns&#34;&gt;&#xA;  General Anti-Patterns&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#general-anti-patterns&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A general set of anti-patterns that might not immediately find place or belong to a specific topic.&lt;/p&gt;&#xA;&lt;h2 id=&#34;anti-pattern-architecture-by-implication&#34;&gt;&#xA;  Anti-Pattern: Architecture By Implication&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#anti-pattern-architecture-by-implication&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Developers make design decisions implicitly rather than explicitly, which can lead to a poorly defined and chaotic architecture. This anti-pattern often emerges when teams lack experience, proper communication, or sufficient design documentation, causing developers to assume that their colleagues share their understanding of the system&amp;rsquo;s design.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/architectural-thinking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/architectural-thinking/</guid>
      <description>&lt;h1 id=&#34;architectural-thinking&#34;&gt;&#xA;  Architectural Thinking&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architectural-thinking&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;An architect sees things differently from a developer. Like a meteorologist might see clouds different from an artists point of view. Many architects believe that &lt;strong&gt;architectural thinking&lt;/strong&gt; is simply &amp;ldquo;thinking about architecture&amp;rdquo;, but its more.&lt;/p&gt;&#xA;&lt;p&gt;There are 4 main aspects of thinking like an architect: &lt;em&gt;Architecture vs Design&lt;/em&gt;, &lt;em&gt;Technical breadth vs Depth&lt;/em&gt;, &lt;em&gt;Analyzing Trade-offs&lt;/em&gt;, and &lt;em&gt;Understanding Business Drivers&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;architecture-vs-design&#34;&gt;&#xA;  Architecture vs Design&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-vs-design&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Software architecture refers to the high-level structuring of a software system, outlining the system&amp;rsquo;s main components, their relationships, and their interactions, serving as a blueprint for the system. Software design, on the other hand, delves deeper into the details, focusing on the realization of that architecture by specifying how each component or module will function, including algorithms, data structures, and interfaces, to achieve the system&amp;rsquo;s overall objectives. While architecture provides a holistic view and establishes the foundational framework, design is concerned with the nitty-gritty aspects that bring this framework to life. That&amp;rsquo;s why there are &amp;ldquo;Architectural Decisions&amp;rdquo; and &amp;ldquo;Designing Guidelines&amp;rdquo;. Architects makes decisions about the architecture, but will only give &amp;ldquo;guidance&amp;rdquo; or &amp;ldquo;advise&amp;rdquo; or design level, where the developer can take their own decisions.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/architecture-decisions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/architecture-decisions/</guid>
      <description>&lt;h1 id=&#34;architecture-decisions&#34;&gt;&#xA;  Architecture Decisions&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-decisions&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Architecture decisions describe the &lt;strong&gt;rules&lt;/strong&gt; for how a system should be constructed. These rules form the &lt;strong&gt;constraints of the system&lt;/strong&gt; and &lt;strong&gt;informs the developers on what they can and cannot do&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Making architecture decisions involves gathering enough relevant information, justifying the decision, documenting the decision, and effectively communicating that decision to the right stakeholder.&lt;/p&gt;&#xA;&lt;p&gt;Architectural decisions are about:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Making the right trade-offs&lt;/strong&gt; for your system. There is no perfect architecture, so we need to be explicit and conscious about which trade-offs we make. It&amp;rsquo;s about &lt;strong&gt;Fit For Purpose&lt;/strong&gt;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Note that the &lt;a href=&#34;https://architecturethehardparts.com/&#34;&gt;Software Architecture: The Hard Parts&lt;/a&gt; books uses the following subtitle:&#xA;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xA;  &lt;p&gt;Modern Trade-Off analyses for Distributed Architectures.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/architecture-risk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/architecture-risk/</guid>
      <description>&lt;h1 id=&#34;architecture-risk&#34;&gt;&#xA;  Architecture Risk&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-risk&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Every architecture has risk associated with it. Analyzing risk is one of the key activities of architecture. By analyzing risk, the architect can address deficiencies within the architecture and take corrective action to mitigate the risk.&lt;/p&gt;&#xA;&lt;h2 id=&#34;risk-matrix&#34;&gt;&#xA;  Risk Matrix&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#risk-matrix&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;When assessing architecture risk it&amp;rsquo;s hard and fairly subjective to qualify a risk as &lt;em&gt;low&lt;/em&gt;, &lt;em&gt;medium&lt;/em&gt;, or &lt;em&gt;high&lt;/em&gt;. The risk matrix can be leverages to reduce the level of subjectiveness.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/best-practices/</guid>
      <description>&lt;h1 id=&#34;best-practices&#34;&gt;&#xA;  Best Practices&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#best-practices&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Almost everything you do as an architect is unique for your given context, situation, organizational priorities and such. Therefore best practices on how to solve a specific situation are non-existing or unrealistic.&lt;/p&gt;&#xA;&lt;p&gt;However, a good methodology on applying a trade-off analysis allows you to find answers to your specific situation.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/clean-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/clean-architecture/</guid>
      <description>&lt;h1 id=&#34;clean-architecture&#34;&gt;&#xA;  Clean Architecture&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#clean-architecture&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;general-overview&#34;&gt;&#xA;  General Overview&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#general-overview&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Clean architecture was created by Robert C. Martin. The general idea is that any type of architecture should respect the rights direction of the dependencies, see the Dependency Rule.&lt;/p&gt;&#xA;&lt;p&gt;The core, the entities is the purest part of the system with 0 impurity. The more we move to outer layers, the more impure the layers become, note that functional programming languages tend to encourage this idea.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/components/</guid>
      <description>&lt;h1 id=&#34;components&#34;&gt;&#xA;  Components&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#components&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Components are the physical manifestation of a module and group artifacts together. Nothing requires you to use components, it just happens to be that its useful to have a higher level of modularity. Components form the fundamental modular building blocks in architecture.&lt;/p&gt;&#xA;&lt;p&gt;Typically the architect defines, refines, manages, and governs components. Architecture is independent of the development process. Generally tne component is the lowest level of the software system an architect directly interacts with. Architects must identify components as one of the first task of a new project. But before an architect can identify components, they must know how to partition architecture.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/conway-law/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/conway-law/</guid>
      <description>&lt;h1 id=&#34;conway-law&#34;&gt;&#xA;  Conway Law&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#conway-law&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Todo&amp;hellip;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Role of conways law in architecture&#xA;&lt;ul&gt;&#xA;&lt;li&gt;See &amp;ldquo;Build microservices&amp;rdquo; book of sam newmann, which has &amp;ldquo;Evolutionary Architect&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Systems&amp;hellip; team topologies&amp;hellip; reflection or architectural style&amp;hellip;&lt;/p&gt;&#xA;&lt;h2 id=&#34;architecture-and-organization&#34;&gt;&#xA;  Architecture and Organization&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-and-organization&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Todo&amp;hellip;&lt;/p&gt;&#xA;&lt;h2 id=&#34;reverse-conway&#34;&gt;&#xA;  Reverse Conway&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reverse-conway&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Todo&amp;hellip;&lt;/p&gt;&#xA;&lt;h2 id=&#34;extra&#34;&gt;&#xA;  Extra&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#extra&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Todo&amp;hellip; Notice how Conway Law, Team Topologies, Organization, all are systems, and architecture is about systems, so it only makes sense that we can draw parallels in all of it.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/design-principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/design-principles/</guid>
      <description>&lt;h1 id=&#34;design-principles&#34;&gt;&#xA;  Design Principles&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#design-principles&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Describes the &lt;strong&gt;guidelines&lt;/strong&gt; for how a system should be constructed. Instead of a hard rule, like the architecture decisions, the guidelines are intended to &amp;ldquo;guide&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;Design (instead of architecture) is more in the &amp;ldquo;implementation details&amp;rdquo;, in the code base (e.g. &lt;a href=&#34;https://deviq.com/design-patterns/design-patterns-overview&#34;&gt;design patterns&lt;/a&gt;), or the actual used technology. Architecture is the structure where the design lives in. Note that the line can be grey sometimes.&lt;/p&gt;&#xA;&lt;p&gt;Example: &amp;ldquo;Wherever possible, leverage async communication for decoupling&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/diagrams-and-presentations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/diagrams-and-presentations/</guid>
      <description>&lt;h1 id=&#34;diagramming-and-presenting-architecture&#34;&gt;&#xA;  Diagramming and Presenting Architecture&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#diagramming-and-presenting-architecture&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Effective communication is critical to an architect&amp;rsquo;s success. Diagramming and presenting are two critical soft skills for the software architect.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pattern-representational-consistency&#34;&gt;&#xA;  Pattern: Representational Consistency&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pattern-representational-consistency&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The practice of always showing the relationship between parts or an architecture, either in diagrams or presentations, before changing views. This is important when describing an architecture, where you must often show different views of the architecture.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://fundamentalsofsoftwarearchitecture.com/images/book/fosa_2101.png&#34;&gt;Diagram Example with Representational Consistency&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/domain-driven-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/domain-driven-design/</guid>
      <description>&lt;h1 id=&#34;domain-driven-design-ddd&#34;&gt;&#xA;  Domain Driven Design (DDD)&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#domain-driven-design-ddd&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Domain-Driven-Design (DDD) is a popular and great logic design process to identify and define domains and their boundaries. &lt;a href=&#34;https://www.oreilly.com/library/view/domain-driven-design-tackling/0321125215/&#34;&gt;This is the original book&lt;/a&gt; and &lt;a href=&#34;https://martinfowler.com/bliki/DomainDrivenDesign.html&#34;&gt;this is a small martin fowler entry&lt;/a&gt;. When reading about DDD, look for the &lt;strong&gt;bounded contexts&lt;/strong&gt; parts which are great for domain modelling, DDD dus more than just that though.&lt;/p&gt;&#xA;&lt;h2 id=&#34;event-storming&#34;&gt;&#xA;  Event Storming&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#event-storming&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The architect tries to determine which events occur in the system based on requirements and identified roles, and build components around those event and message handlers. This works well in distributed architectures like microservices that use events and messages, because it helps architects define the messages used in the eventual system.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/evolutionary-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/evolutionary-architecture/</guid>
      <description>&lt;h1 id=&#34;evolutionary-architecture&#34;&gt;&#xA;  Evolutionary Architecture&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#evolutionary-architecture&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;All architectures evolve, they have to, every system changes over time due to internal factors (technology changes, new use cases) and external factors (the industry changes, new markets, &amp;hellip;).&#xA;It only makes sense to look at your architecture as something that evolves over time for various reasons.&lt;/p&gt;&#xA;&lt;p&gt;Evolutionary architecture defines the concept of a &lt;strong&gt;fitness function&lt;/strong&gt; to measure certain architectural characteristics over time. By collecting this data from fitness functions, one can see how architectural characteristics are affected as the architecture evolves over time.&#xA;With this data to your disposal, you can observe if changes negatively or positively affected your architecture. This observability of your architecture allows you to react and adjust accordingly the development of your architecture in a way that desired characteristics are conserved.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/feature-toggles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/feature-toggles/</guid>
      <description>&lt;h1 id=&#34;feature-toggles&#34;&gt;&#xA;  Feature Toggles&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#feature-toggles&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Note: Also known as Feature Flags.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;These are not necessarily architecture domain specific, but they allow for a smooth transition in evolutionary architecture. Especially the operational toggles require maybe some architectural consideration if they make sense.&lt;/p&gt;&#xA;&lt;p&gt;The following part is basically a summary of this awesome &lt;a href=&#34;https://martinfowler.com/articles/feature-toggles.html&#34;&gt;Martin Fowler Entry by Pete Hodgson&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-use&#34;&gt;&#xA;  Why Use?&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#why-use&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Code Branch Management&lt;/strong&gt;: By shipping new code to production, hidden under a toggle, you can limit the amount of long-lived branches. Also known as &lt;em&gt;dark deployments&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Test In Production&lt;/strong&gt;: Test features in production with a limited set of users. Allowing for A/B testing or canary releases.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flighting&lt;/strong&gt;: Incremental roll out of new functionality.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Kill Switch&lt;/strong&gt;: Turn of certain functionality without redeploying, like a circuit breaker. When the load is to high, you can switch off certain features that are resource intensive (e.g. a recommendation service).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;categories&#34;&gt;&#xA;  Categories&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#categories&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;It can be tempting to lump all feature toggles into the same bucket, but this is a dangerous path. The design forces at play for different categories of toggles are quite different and managing them all in the same way can lead to pain down the road. It can be tempting to lump all feature toggles into the same bucket, but this is a dangerous path. The design forces at play for different categories of toggles are quite different and managing them all in the same way can lead to pain down the road.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/how-to-do/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/how-to-do/</guid>
      <description>&lt;h1 id=&#34;how-to-do-wip&#34;&gt;&#xA;  How To Do&amp;hellip; (WIP)&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-to-do-wip&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is a list of examples on how certain work can be approached and executed. These are not hard rules, but more like aids to help you get started. As you learn and grow as an architect, you will find your own way of doing things.&lt;/p&gt;&#xA;&lt;h2 id=&#34;designing-a-greenfield-project&#34;&gt;&#xA;  Designing a greenfield project&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#designing-a-greenfield-project&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Get requirements -&amp;gt; See components the process on how to define them, then characteristics, the quanta, &amp;hellip; then decided monolith/distrubuted based on that component thinking, etc &amp;hellip;&#xA;Chapter component based thinking is a good transition for that.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/laws-of-software-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/laws-of-software-architecture/</guid>
      <description>&lt;h1 id=&#34;laws-of-software-architecture&#34;&gt;&#xA;  Laws of Software Architecture&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#laws-of-software-architecture&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;first-law-of-software-architecture&#34;&gt;&#xA;  First Law of Software Architecture&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#first-law-of-software-architecture&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xA;  &lt;p&gt;Everything in software architecture is a trade-off.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&lt;h2 id=&#34;second-law-of-software-architecture&#34;&gt;&#xA;  Second Law of Software Architecture&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#second-law-of-software-architecture&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xA;  &lt;p&gt;Why is more important than how.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&lt;h2 id=&#34;resources&#34;&gt;&#xA;  Resources&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#resources&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://fundamentalsofsoftwarearchitecture.com/&#34;&gt;Fundamentals of Software Architecture&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/make-effective-teams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/make-effective-teams/</guid>
      <description>&lt;h1 id=&#34;making-development-teams-effective&#34;&gt;&#xA;  Making Development Teams Effective&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#making-development-teams-effective&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Being able to make steams productive is one of the ways that software architects differentiate themselves from other software architects. Teams that feel left out of the loop or estranged from software architects (and also the architecture) often do not have the right level of guidance and right level of knowledge about various constraints on the system, and consequently do not implement the architecture correctly.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/modules/</guid>
      <description>&lt;h1 id=&#34;modules&#34;&gt;&#xA;  Modules&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#modules&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Different platforms offer different reuse mechanisms for code, but all support some way of grouping related code together in &lt;em&gt;modules&lt;/em&gt;. This concept of &lt;em&gt;modules&lt;/em&gt; is proven slippery to define. Therefore, we will use a definition from the &lt;a href=&#34;https://fundamentalsofsoftwarearchitecture.com/&#34;&gt;Fundamentals of Software Architecture&lt;/a&gt; - Chapter 3 book.&lt;/p&gt;&#xA;&lt;p&gt;Modularity is an organizing principle. IF an architect designs a system without paying attention to how the pieces wire together, a myriad of difficulties might be presented. Good modularity exemplifies the definition of an implicit architectural characteristic. No project features a requirement that asks the architect to ensure good modular distinction and communication, yet sustainable code bases require order and consistency.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/negotiation-and-leadership-skills/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/negotiation-and-leadership-skills/</guid>
      <description>&lt;h1 id=&#34;negotiation-and-leadership-skill&#34;&gt;&#xA;  Negotiation and Leadership Skill&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#negotiation-and-leadership-skill&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;These are hard skills to obtain. This topic cannot make you an expert overnight, the techniques introduced here are a good starting point for gaining these important skills. The reason we cover these skills is because a Software Architect must understand the political climate of the enterprise and navigate the politics.&lt;/p&gt;&#xA;&lt;p&gt;Reason being that almost every decision will be challenged. Developers that think they know more than the architect on a particular part, other architect who think they have a better approach, or business stakeholders that consider your decision to be too expensive. Your goal is not to go to war, but to find the best outcomes for the organization.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/software-architect-role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/software-architect-role/</guid>
      <description>&lt;h1 id=&#34;what-does-a-software-architect-do&#34;&gt;&#xA;  What does a Software Architect do?&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-does-a-software-architect-do&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;based on &lt;a href=&#34;https://fundamentalsofsoftwarearchitecture.com/&#34;&gt;Fundamentals of Software Architecture&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Architectural wisdom and ideas can very specific for their time they were documented. As technology constantly changes, many aspects regarding architecture will change along with that. An example would be the introduction of tools like Kubernetes, which made the restructuring of any software topology cheap, which allows for a more evolving topology. A decade ago, such decisions were costly, so mostly final, once they were made.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/systems-thinking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/systems-thinking/</guid>
      <description>&lt;h1 id=&#34;systems-thinking&#34;&gt;&#xA;  Systems Thinking&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#systems-thinking&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;&#xA;  Definition&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#definition&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xA;  &lt;p&gt;A &amp;ldquo;system&amp;rdquo; in systems thinking is a set of interconnected elements, which can be subsystems in their own right, organized within defined boundaries. These elements function cohesively to achieve a common purpose or produce specific outcomes, influenced by the system&amp;rsquo;s structure and internal interactions.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Interconnected Elements&lt;/strong&gt;: A system contains one or many elements which are interconnected.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Can be subsystems in their own right&lt;/strong&gt;: Any element can be a high level abstraction of a whole system of its own.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Organized within defined boundaries&lt;/strong&gt;: A system as clear, set boundaries, anything outside the boundaries is not a part of the system. However, a boundary can be adjacent to other systems which the systems is interconnected to.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Elements function cohesively to achieve a common purpose or produce specific outcomes&lt;/strong&gt;: The structure and behavior of these interconnected elements produce certain outcome.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;building-blocks&#34;&gt;&#xA;  Building Blocks&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#building-blocks&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&amp;hellip;todo&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/team-topologies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/team-topologies/</guid>
      <description>&lt;h1 id=&#34;team-topologies&#34;&gt;&#xA;  Team Topologies&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#team-topologies&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;Although Team Topologies is strictly not about architecture, it has a huge impact and connection on how we structure team ownership and our architecture according to Conways law. Therefore, I felt this made sense to cover in the Architecture Handbook.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;what-is-team-topologies&#34;&gt;&#xA;  What is Team Topologies?&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-team-topologies&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xA;  &lt;p&gt;An &lt;em&gt;adaptive model&lt;/em&gt; to organization design.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&lt;p&gt;&amp;ldquo;Team Topologies&amp;rdquo; is a &lt;a href=&#34;https://teamtopologies.com/book&#34;&gt;book&lt;/a&gt; that provides a framework for organizing and optimizing software development teams within an organization. The book emphasizes the importance of adapting team structures and interactions to the specific context of the organization and its technological landscape. This is all based on the &lt;a href=&#34;https://martinfowler.com/bliki/ConwaysLaw.html&#34;&gt;Reverse Conway Maneuver&lt;/a&gt;. By embracing Conways Law, this framework tries to help create efficient teams that will also result in your desired architecture. As always, frameworks come with their fair share of criticism, but it doesn&amp;rsquo;t make it worth covering and using as input in your decision process.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/software-architecture/topics/threat-modeling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/software-architecture/topics/threat-modeling/</guid>
      <description>&lt;h1 id=&#34;threat-modeling&#34;&gt;&#xA;  Threat Modeling&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#threat-modeling&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Todo&amp;hellip;&lt;/p&gt;&#xA;&lt;h2 id=&#34;resources&#34;&gt;&#xA;  Resources&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#resources&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/threat-modeling-designing/9781118810057/&#34;&gt;Threat Modeling: Designing for Security&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
