[{"id":0,"href":"/ai/readme/","title":"Readme","section":"Ais","content":" AI # Tools # General Models # ChatGPT Claude Gemini DeepSeek Video Generation and Editing # Synthesia Runway Filmora OpusClip Notetakers and Meeting Assistants # Fathom Nyota NotebookLM - Study - Summerize content and find different ways to learn and process it Research # Deep Research Writing # Rytr Sudowrite Grammar and Writing Improvement # Grammarly Wordtune Search Engines # Perplexity ChatGPT Search Social Media Management # Vista Social FeedHive Image Generation # Midjourney DALL·E 3 Graphic Design # Canva Magic Studio Looka App Builders \u0026amp; Coding # Bubble Bolt Lovable Cursor v0 Project Management # Asana ClickUp Scheduling # Reclaim Clockwise Customer Service # Tidio AI Hiver Recruitment # Textio CVViZ Knowledge Management # Notion AI Q\u0026amp;A Guru Email # HubSpot Email Writer SaneBox Shortwave Presentations # Gamma Presentations.ai Resume Builders # Teal Kickresume Voice Generation # ElevenLabs Murf Music Generation # Suno Udio Marketing # AdCreative Sales # Clay "},{"id":1,"href":"/azure/","title":"Index","section":"Knowledgebase","content":" Cloud Azure Study Notes # AZ-300 Study Notes AZ-300 Practial Notes "},{"id":2,"href":"/business/","title":"Index","section":"Knowledgebase","content":" Business # The Marketing Process # Source: (Bussines Model Canvas) The key 5 questions # How will potential customers discover how you can help them? How will they decide whether to buy your service? How will they buy it? How will you deluver what customers buy? How will you follow-up to make sure customers are happy? Why Channels are so crucial # You must define how you help to communicate how you help. You must communicate how you help to sell how you help. You must sell how you help in order to get paid for helping. "},{"id":3,"href":"/career/","title":"Index","section":"Knowledgebase","content":" Career # General Tips # “Let me take care of that” are the golden words to tell someone. Disregarding the size of it. You will get noticed for taking care of things, that attitude, and getting things done. Communication and networking are the true difficult skills that create impact. Your network determines your influence and (potential) impact. Network! Within your organization there should is no reason to not reach out to other employees for a coffee chat/meet-n-greet. Brag Document / Work Log # Keep document that you continuously amend (like a diary) where you track your smaller and greater achievements and successes at work. This allows you to:\nReflect on your achievements and how you spend your time at work. What work do you feel most proud of? What do I wish to do more/less off? Which projects hade the effect I wanted ? Or not ? What can I do better next time? What did I struggle with? How can I grow? What is the impact of my work? How am I doing regarding any goals I set for myself? Have a documented track record of you achievements Share with your leadership your achievements at any given time (especially during performance reviews and salary renegotiations), remember, your leadership is usually not fully aware of all the work you do and results deliver. When the time comes for a performance review, your memory might draw blank and you have little memory of the work you did. Your manager also manages other people, they will not remember all of your work. Good data gives your manager the tools to justify to others your promotion or salary increase. When you get a new manager a few months before the big performance review, they won\u0026rsquo;t have any knowledge about your recent work. Reflect on what skills you have or gained (see Discover your skills on a more details) Share during a job interview or job applications about relevant achievements that are relevant for the job. Look back and be proud of what you have achieved. Try to update the document once every week or two, but eventually find a frequency that works for you, but allows you to not forget any relevant topics.\nImportant # Consider documenting also the little things you do, now you can reflect on how you spend time at work. Code Reviews, making a process easier, create more automation. Consider documenting the direct impact for each of the things you write down, now you can reflect on the impact of your work. Maybe you spend a lot of time spend on low impact work. Not ideal! Consider documenting anything quantifiable through metrics, insights, KPIs, now you can quantify the impact of your work. Consider documenting and side effects, n-tier impact of your work. Maybe your work has resulted in shorter sales cycles for the company, as a result of your automation project which allows for faster building of PoC\u0026rsquo;s. Think about business areas and processes that gained advantage. Did it save any money? Did it generate any money? It\u0026rsquo;s really great for yourself and when talking to others, to know how have an impact on more than your direct surrounding. Consider documenting what you have learned of which skills you gained or honed during certain work. Links # Julia Evans\u0026rsquo;s blog on Brag Document Bag Document: Bragdocs.com Saying No # Before saying no, ask more questions\nWhat are you asking? Whom else have you asked? When you say this is urgent, what do you mean?\u0026quot; If I couldn\u0026rsquo;t do all of this, but just a part, what part would you have me do? What do you want me to take of my plate to so I can do this? This might result in having a better scope, no overcommiting or people not comming back to you cause you ask too many (good) questions. Or they force you to do it and shut up, but less likely.\nYou can also make the thing you say no a 3th party object. \u0026ldquo;I\u0026rsquo;m afraid I have to say no to this\u0026rdquo; instead of \u0026quot; I\u0026rsquo;m afraid I have to say no to you\u0026quot;.\nTemplate # - For each Achievement/Activity Event \u0026gt; Some time indication (when, how long, ...) \u0026gt; What was my role or involvement? \u0026gt; What skills did I use, gain, or honed? \u0026gt; What was the direct impact and/or business value? \u0026gt; What was the n-tier impact and/or business value? \u0026gt; Did it had desired impact? \u0026gt; What could I do next time better? Discover your traits \u0026amp; personality # Make a list of your personality and traits\nUse this list to write down what you like and don\u0026rsquo;t like\nFrom this, try to write down an understanding of the type of jobs/roles you want and don\u0026rsquo;t want.\nWe will use this in our job search.\nTIP: Personality tests, friends, family and (former) coworkers can always help you make that list.\nDiscover your skills # Make a list of projects, feedback from (former) co-workers, efforts, initiatives or roles you were a part of. Write for each list item what you did, how it went, what impact it had, what side effects and positives. Consider adding any \u0026ldquo;lessons learned\u0026rdquo;. Don\u0026rsquo;t forget about your Brag Document which would be your natural place to go. Now ask yourself for each list item \u0026ldquo;What skills did I apply to make this happen?\u0026rdquo;. Now you have a \u0026ldquo;skill inventory\u0026rdquo; and examples of where you applied all of these skills. Now go through each skill in your skill inventory and write down, following the STAR method, an example of how you applied this skill. Note that you now can take the examples of previous steps, and you just need to rephrase them into the STAR template. Now you got a skill inventory and STAR based \u0026ldquo;stories\u0026rdquo; that can illustrate these skills. TIP: You can always contact (former) co-workers to answer a small survey about you that can help identify your skills. The Job Journey # When Applying # When you write a cover letter, consider which skills are key to sell in that cover letter, use your skill inventory\u0026rsquo;s stories to pick the right stories. When you are invited for an interview, read over your skill inventory, so you can easily use these prepared stories/examples to answer questions and proof competence. The Job Search Process # Understand what type of jobs/roles you want and don\u0026rsquo;t want (see Traits). Search for jobs that describe what you want by paying attention to the \u0026ldquo;responsibilities\u0026rdquo; section and the general description. Make a short list of jobs that you want to apply to. The Job Application Process # Using your traits \u0026amp; personality Once you have a job you want to apply for\u0026hellip; Read through the job ad and highlight any references to skills. Pay especially attention to the \u0026ldquo;qualifications\u0026rdquo; and \u0026ldquo;responsibilities\u0026rdquo; section. Now you have mapped out all the \u0026ldquo;desired\u0026rdquo; skills. Tailor your CV to match all these \u0026ldquo;desired\u0026rdquo; skills with the skill you have. Making sure they mention it and the same writing. Write the cover letter where you talk a bit about yourself, what makes you unique, your personality (Traits) without, and then pick 1 to 3 stories of your skill inventory to show the top skills you think that are key for this position. Illustrating why you are a good match. Submit Before you have an interview, read through your skill inventory to freshen up these \u0026ldquo;stories\u0026rdquo; for each skill. Now you are prepared to respond to any questions about your skills with a well prepared example to illustrate your competence. Job Search Tips # What to know about ATS ATS Resume Templates exist Use ChatGPT: \u0026ldquo;create a prompt called you are my resume creator”, Use SkillSyncer to test your resume ATS score. Use InstaResume for nice templates Cover Letter Template # Dear [Employer\u0026#39;s Name | Hiring Manager], Opening Paragraph: Introduce yourself and state the position you are applying for. Mention how you found out about the job opening. Provide a brief overview of why you are interested in this position and the company. Body Paragraph(s): Discuss your qualifications and experience in detail. Highlight key achievements and skills that are relevant to the job. Use specific examples to demonstrate how your background and expertise make you a good fit for the position. This section can be one or two paragraphs depending on how much information you need to convey. Insert one \u0026#34;about me\u0026#34; paragraph that talks more about you, your personality and traits, who is this person? DO I see myself working with him/her ? Closing Paragraph: Reiterate your interest in the position and the company. Summarize why you would be a good fit and express your enthusiasm for the opportunity to discuss your application further. Mention that you have attached your resume and any other required documents. Kind Regards [Your Name] The Job Interview # What are your Salary expectations? Remember the total package is what matters, so you can never give an educated guess until you understand the full package: The role Position Growth opportunities Culture Benefits Tools remember, Try to frame it as you are in it together, towards a mutual goal. Say WE, avoid YOU and I. You are eager to learn about them all through the process. \u0026ldquo;The time to discuss salary is after they\u0026rsquo;ve fallen in love with you\u0026rdquo; - John Lees keep it vague but positive, and if possible, put ball in their court. Source 1 Trick question, your answer depends on the stage of the interview process you are. Last Round: They might be actually interested in accommodating your expectation. Early Round: They don\u0026rsquo;t try to accommodate, but eliminate you if your expectations are wide off. No way of knowing the actual Salary range Avoid giving a single number Example: Part 1: At this point I need more details about the role before I can give an accurate answer on that. They might counter with \u0026ldquo;what details do you need?\u0026rdquo;. You can respond EITHER A: Need to know about the work hours, flexibility, location, expectations, scope of responsibility, benefits, remote work, bonus structure and such. B: \u0026ldquo;Maybe just more of a feel for the culture\u0026rdquo; Part 2: If they push: I understand this is an approved position, so the salary range must be approved, can I ask what it is for this position? Whatever they say, you can say \u0026ldquo;That would work for me\u0026rdquo;, unless they still ask for a number\u0026hellip; Part 3: If no range but still push for number: give a wide range. Really low to really high. I will need between 40 000 to 100 000 per year, based on the details. Key take away: NEVER GIVE A NUMBER, wide range. Now they can\u0026rsquo;t eliminate you due to salary expectations and you are able to push for the upper range when they start talking about it at a later more serious round. Source 2 Strategy One: Redirect the conversation (2 ways) Ask about their budget: \u0026ldquo;I actually don\u0026rsquo;t understand the full scope of the role at this point to accurately price myself, but I would love to know the budgeted salary range.\u0026rdquo; If they answer, you can respond: \u0026ldquo;That\u0026rsquo;s helpful to know, If you were to offer me the job, is there room to negotiate?\u0026rdquo; Move past the question and go back to your qualifications: \u0026ldquo;I\u0026rsquo;m stull trying to fully understand the role and what\u0026rsquo;s involved. I\u0026rsquo;d love to continue talking about my qualifications and why I think I\u0026rsquo;m a fit for this position.\u0026rdquo; \u0026ldquo;That\u0026rsquo;s not I\u0026rsquo;m comfortable answering, but I\u0026rsquo;m happy to talk about my qualifications for this role\u0026rdquo; Strategy 2: Offer a salary range When your deflecting didn\u0026rsquo;t work or you have enough information. Try to do research for salaries for similar roles. LinkedIn, Glassdoor, recruiters, Salary.com, if possible. Or ask people in your network if possible. Don\u0026rsquo;t focus on a single number. State your range and provide a rationale (research, skills, etc.) Acknowledge that salary is just one factor in your decision. Signal flexibility, this is a conversation, not a demand about to the total compensation. Show enthusiasm. 3 examples: I'm looking for a competitive salary that reflects my qualifications and experience. Based on my research and the requirements of the role as I understand them, I would expect a salary in the range of \u0026lt;insert\u0026gt;. Of course, I'm open to discussing the details of the entire compensation package, since salary is just one factor. I'm particularly excited to learn more about the opportunities for growth and advancement here. Given my experience and expertise, I'm looking to make between x and y in my next role. I've done some research on similar roles and talked to people in comparable organizations, all of which helped me confirm that range. I know I'd be a valuable asset to your team and am open to learning more about the budget for the role and the other benefits that you offer employees. I've been doing some research on similar roles and my understanding is that, for someone at my level, with my background and experience, I can expect to make a salary in the range of x to y. Of course compensation is not the only thing that is important to me. So I'm eager to hear more about your benefits package, including paid time off and other perks. What's most important to me is finding a place where I can thrive. I can be flexible around the exact numbers for a job that's a great fit. Tweak it to your liking. Source 3 Examples: \u0026ldquo;Thank you so much for asking. I definitely want to make sure we\u0026rsquo;re aligned before moving forward. Do you have the salary band for this position?\u0026rdquo; -\u0026gt; Trying to align along mutual goal. \u0026ldquo;I\u0026rsquo;m flexible on salary, depending on other elements of the compensation package. Do you have the salary band for this position?\u0026rdquo; \u0026ldquo;While I am flexible on salary, I am currently interviewing for positions that are in range x to y.\u0026rdquo; -IF you really know what you want. Reminds also, there is competition. Not if you are desperate or insecure. Good if you have many options and know what you want. Asking questions\u0026hellip; Source The Negotiation # Example flow when getting an offer: Express gratitude: \u0026ldquo;Thank you for your offer. I am so excited to join the team\u0026rdquo; Counter: \u0026ldquo;After learning more about the position, a salary of x feels more appropriate to me.\u0026rdquo; Unique Offering: \u0026ldquo;With my extensive background in x, I bring much more to the table than \u0026hellip;. . \u0026quot; Enroll them to help: \u0026ldquo;Are you able to help me get closer to that number?\u0026rdquo; Close with urgency: \u0026ldquo;If so, I\u0026rsquo;m happy to sign right now\u0026rdquo;. At Work - Tips From ChatGPT # Master Systems Thinking In a world of complexity and interconnected issues, systems thinking is a key skill.\nHow to Apply It:\n•\tMap Interdependencies: •\tBreak down challenges into their components and visualize how they interact (e.g., through flowcharts or causal loops). •\tIdentify upstream causes and downstream effects before making decisions. •\tAnticipate Trade-Offs: •\tRecognize that every decision has ripple effects. Before acting, assess the potential unintended consequences on stakeholders, timelines, and resources. •\tPrioritize Long-Term Thinking: •\tBalance short-term wins with long-term strategic goals. Understand that sustainable solutions may take more time but yield greater overall value. Communicate with Clarity and Empathy Complex issues require clear and persuasive communication to align teams and stakeholders.\nHow to Apply It:\n•\tSimplify Without Oversimplifying: •\tUse analogies, examples, or visuals to explain complex ideas in relatable terms while preserving nuance. •\tAvoid “binary” thinking (e.g., “good vs. bad”). Instead, frame discussions around options, trade-offs, and priorities. •\tAdapt to Your Audience: •\tTailor your messaging to align with stakeholders’ values, priorities, and levels of understanding. •\tFor example, an executive may need a high-level summary, while your team might require detailed explanations. •\tEmphasize Shared Goals: •\tHighlight common objectives to reduce resistance or polarization. Frame challenges as opportunities to collaborate rather than compete. Develop Strategic Empathy Understanding diverse perspectives and values is critical for navigating disagreements and fostering collaboration.\nHow to Apply It:\n•\tSeek First to Understand: •\tListen actively to others’ concerns, motivations, and values, especially if they seem to oppose your ideas. •\tAsk questions like: “What outcomes are most important to you?” or “What challenges do you foresee?” •\tAcknowledge Emotional Dynamics: •\tRecognize when emotions like fear, frustration, or defensiveness are driving resistance. Address them empathetically rather than dismissing them. •\tBuild Bridges Across Divides: •\tAct as a mediator when conflicts arise, helping others see the bigger picture and align on shared interests. Balance Simplification and Complexity Avoid falling into the trap of oversimplifying complex issues, while making them actionable.\nHow to Apply It:\n•\tBreak Problems Into Layers: •\tSeparate the high-level overview (e.g., strategy) from the detailed layers (e.g., tactics, execution). Present each layer based on the audience’s needs. •\tExample: “Here’s the big picture, but let’s zoom into how it affects our team.” •\tTackle Problems Iteratively: •\tApproach large challenges in manageable steps, solving the most pressing or impactful issues first while keeping the broader system in mind. •\tUse Scenarios for Decision-Making: •\tWhen proposing solutions, present multiple scenarios with pros, cons, and trade-offs to demonstrate your understanding of complexity. Build Resilience in Decision-Making Handling complexity requires mental resilience and adaptability.\nHow to Apply It:\n•\tBe Comfortable With Ambiguity: •\tAccept that some decisions will have uncertainty and unknown consequences. Make informed choices and adjust as you learn more. •\tLearn From Feedback Loops: •\tTreat outcomes as data points. When things don’t go as planned, analyze why and adapt your strategy. •\tShare these learnings openly to build trust and improve team problem-solving. •\tStay Focused on Your Sphere of Influence: •\tDon’t let complexity paralyze you. Focus on the aspects of a problem you can control or influence and collaborate with others on the rest. Build Alignment in a Polarized Environment Disagreements and competing interests are inevitable. Use strategies to align diverse viewpoints.\nHow to Apply It:\n•\tFrame Problems Around Stakeholder Benefits: •\tShow how solving a complex problem benefits each stakeholder group. For example, align solutions to their goals (e.g., efficiency, growth, or impact). •\tBridge Personal and Organizational Goals: •\tHelp team members see how their work connects to the broader mission and outcomes of the organization. •\tFacilitate Constructive Dialogue: •\tWhen debates arise, guide discussions toward constructive questions: •\t“What trade-offs are we willing to accept?” •\t“How can we test our assumptions?” Lead With Vision and Flexibility In interconnected systems, success often depends on balancing a clear vision with adaptability.\nHow to Apply It:\n•\tArticulate a Clear Vision: •\tPaint a compelling picture of what success looks like and why it matters. Use this vision to anchor decisions and maintain focus amid complexity. •\tStay Open to Iteration: •\tBe ready to pivot when new information arises or when initial "},{"id":4,"href":"/change-management/","title":"Index","section":"Knowledgebase","content":" Change Management # How to do cultural change- 2-2-1 rule # Science based, applied in Nike.\n2 points of reinforcement from management chain for given individual communicate they think its a good idea. They show support. 2 points of reinforcement from peers for given individual communicate they think its a good idea. They show support. 1 point of success story. Patterns # See the list of Patterns\nHow Behavior Spreads # How Behavior Spreads: The Science of Complex Contagions by Damon Centola delves into how social behaviors, ideas, and practices spread through populations, contrasting traditional views of contagion (like infectious diseases) with the spread of behaviors and innovations. Centola, a sociologist, challenges the dominant model of \u0026ldquo;simple contagions\u0026rdquo; in favor of a more nuanced framework, termed \u0026ldquo;complex contagions.\u0026rdquo; Here are the key findings and lessons from the book:\n1. Complex Contagions vs. Simple Contagions # Simple contagions refer to things like viruses, where a single contact with an infected person may be enough to catch the infection. This follows a \u0026ldquo;contact-based\u0026rdquo; model, which is easy to understand and has been the dominant framework in epidemiology and social network theory. Complex contagions involve behaviors or ideas that require reinforcement from multiple sources before they spread. Unlike a simple contagion, seeing a new behavior once may not be enough to adopt it. Examples include social movements, norms, and innovations. The spread requires social validation and exposure through multiple points of contact. 2. Strong Ties vs. Weak Ties # Traditional social network theory, drawing on Granovetter’s concept of \u0026ldquo;the strength of weak ties,\u0026rdquo; emphasizes the importance of weak ties (acquaintances) in disseminating information. Weak ties were thought to be crucial for spreading new behaviors because they connect disparate social groups. Centola argues that strong ties (close-knit social groups) are essential for spreading complex behaviors. This is because strong ties offer the social reinforcement and repeated exposure necessary to overcome the resistance to adopting new behaviors or ideas. It’s not enough for a person to be exposed to a behavior once—they need validation from multiple trusted sources before adopting it. 3. The Role of Social Networks # Centola highlights that the structure of a social network is a key determinant of whether a complex behavior will spread. Dense clusters of strong ties promote the adoption of new behaviors, while sparse networks with many weak ties are better suited for spreading information quickly but not necessarily changing behavior. Network clustering—where groups of people are densely interconnected—can facilitate the spread of complex contagions, as repeated reinforcement within these clusters encourages adoption. 4. Diffusion Dynamics # In contrast to traditional diffusion models, which suggest that behaviors spread outward from a single innovator (like a ripple in water), complex behaviors spread more unevenly, with adoption often occurring within clusters of the social network first. The behavior then jumps between clusters once it has gained sufficient momentum within each group. Thresholds for adoption are key. Individuals may not adopt a behavior unless they see a certain number of others in their social group doing the same. This leads to tipping points where behaviors suddenly spread rapidly after reaching critical mass. 5. Real-World Applications # Centola uses real-world examples, including online experiments and case studies, to show how complex contagions play out in various domains. For instance, health behaviors, like quitting smoking or adopting fitness routines, often require repeated social reinforcement. Social movements and innovations—such as the Civil Rights Movement or the rise of solar energy adoption—also follow the complex contagion model, spreading through strong social networks and requiring multiple reinforcements before they catch on. 6. Digital Networks and Online Behavior # The book also explores how the dynamics of social contagions change in online networks, where the distinction between strong and weak ties can become blurred. Even in online spaces, Centola argues, repeated exposure and validation from multiple sources are crucial for spreading behaviors like activism or the adoption of new technologies. Online platforms and algorithms that reinforce echo chambers may actually facilitate the spread of complex behaviors within clusters, but make it harder for behaviors to jump across different social groups. 7. Implications for Policy and Innovation # Understanding how complex contagions work can help policymakers, public health officials, and innovators design more effective strategies for promoting social change. For example, simply broadcasting a public health message may not be enough—targeting densely connected groups within communities for sustained engagement can be far more effective. Marketers and social change advocates need to focus on building critical mass within clusters of adopters, rather than trying to target isolated individuals. This suggests a shift from mass advertising to strategies that prioritize social reinforcement within specific communities. 8. Behavioral Norms and Collective Action # Centola emphasizes that collective behaviors, like participation in protests or adopting environmental practices, often spread when individuals see enough others in their network taking action. A critical lesson is that visibility and validation within a group are essential for mobilizing large-scale collective action. Key Lessons: # Reinforcement is crucial: Unlike simple contagions, complex behaviors often require multiple exposures and social reinforcement before individuals adopt them. Strong ties matter: For behaviors to spread, close relationships (strong ties) within a social network are more important than weak ties for promoting adoption. Network structure shapes diffusion: The way people are connected—especially in clusters—greatly affects whether a behavior will spread. Tipping points exist: Behaviors often spread slowly at first but can rapidly accelerate once they reach critical mass within key social clusters. Design for social networks: Policymakers, marketers, and change agents need to design interventions that leverage the power of social networks and focus on clusters for effective diffusion of behaviors. How Behavior Spreads challenges simplistic models of contagion, providing a more comprehensive framework for understanding how ideas, practices, and social movements spread in human societies.\nADKAR Model # Awareness of the need to change Desire to support and take part in the change Knowledge of how to change Ability to implement the change Reinforcement to sustain the change. The ADKAR Model is prescriptive and goal-oriented, each milestone must be achieved to define success. It uses a 1–5 scale to determine how strongly an individual meets the requirements of each milestone. If a person scores a three or below, that specific step must be addressed before moving forward, Prosci defines this as a barrier point.\nThere are other models on wikipedia\nReactions in the change curve # Kübler-Ross herself acknowledged that the stages were often misunderstood and oversimplified. She emphasized that they were not prescriptive or exhaustive but rather a way to normalize and validate the range of emotions people might feel when confronting profound loss or change.\nAs this change curve is based on Elisabeth Kübler-Ross\u0026rsquo;s stages of grief model. Which is about the terminal ill accepting their status, instead the one loosing someone. It\u0026rsquo;s also more of a range of types of emotions you can go through, not perse in that exact order.\nOthers # Resources # More Fearless Change Fearless Change - Patterns for Introducing New Ideas How Behavior Spreads Change Management - Wiki - More Models "},{"id":5,"href":"/coaching/","title":"Index","section":"Knowledgebase","content":" Coaching # In the coaching process you have a \u0026ldquo;Coach\u0026rdquo;, the one who coaches, and the \u0026ldquo;Client\u0026rdquo;, the one who is being coached.\nCoaching does not involve telling clients what to do but empowers them to find their own solutions.\nWhat It Is # Coaching is a developmental process where a coach supports someone in achieving specific personal or professional goals by providing guidance, feedback, and encouragement. It involves active listening, questioning, and facilitating self-discovery to help clients enhance their skills, overcome challenges, and maximize their potential. Coaching is goal-oriented, collaborative, and focused on the client\u0026rsquo;s strengths and future aspirations.\nWhat It Is Not # It is not therapy or counseling, which deal with resolving past issues and emotional problems, nor is it consulting, where the expert provides specific solutions and advice.\n\u0026ldquo;The Coaching Habbit\u0026rdquo; # This is a coaching strategy by Micheal Bungay Stanier, based on 7 type\u0026rsquo;s questions to use during coaching. This strategy is more for coaching people around you and help them, rather than helping someone progress in their career or such. Nevertheless, many of these questions are reusable tools for communicating and coaching in general.\nTell less and ask more. Your advice is not as good as you think it is.\nALWAYS LISTEN TO THE ANSWERS\nThe Kickstart Question: \u0026ldquo;What\u0026rsquo;s on your mind?\u0026rdquo; This turns your conversation into a real conversation. If you know what other question to ask, ask it, kickstart the conversation. Lead with \u0026ldquo;Out of curiousity\u0026rdquo; if you must, it lessends the heaviness of a question if necessary. The AWE Question: \u0026ldquo;And What Else?\u0026rdquo; You can ask it multiple times. This triggers to explore more options (insteado f shoulld we do this or not) Often results in better options Tames your advice monster (that urge to give advice) Buys you time to figure out more about the situation \u0026ldquo;There is is nothing else\u0026rdquo; is the response that shows success, all options are explored. Also, too many options are neither productive, but this line of questioning at least explores alternatives. If energy drains, then move on. Use this question with other questions to keep probing till you get to the bottom. The Focus Question: \u0026ldquo;What\u0026rsquo;s the real challenge here for you?\u0026rdquo; Often when people lay out a challenge, its not the actual problem. This allowes to probe deeper. Cause if the actual problem is not identifed we often end up solving the wrong problem or nothing at all. Slows down the rush to action, and forces focus. \u0026ldquo;For You\u0026rdquo; is important part of the question, as it focusses on the development of the individual. The Foundation Question: \u0026ldquo;What do you want?\u0026rdquo; The Lazy Question: \u0026ldquo;How can I help?\u0026rdquo; Don\u0026rsquo;t offer or tell what you should do to help, they need to formulate this. Delivery matters, if you are worried, you can soften it with: \u0026ldquo;Out of curiousity\u0026hellip;\u0026rdquo; \u0026ldquo;Just so I know\u0026hellip;\u0026rdquo; \u0026ldquo;To help me understand better\u0026hellip;\u0026rdquo; \u0026ldquo;To make sure that I\u0026rsquo;m clear\u0026hellip;\u0026rdquo; If they ask something you cant/wont do: \u0026ldquo;I can\u0026rsquo;t do that\u0026hellip; but I could do \u0026rdquo; if you are not comfortable to just say no. \u0026ldquo;Let me think about that\u0026rdquo; if you need some time before saying yes or no. Be cautious to not now switch to the \u0026ldquo;rescuer\u0026rdquo; habbit The Strategic Question: \u0026ldquo;If you\u0026rsquo;re saying yes to this. what are you saying no to?\u0026rdquo; It is easy to say \u0026ldquo;YES\u0026rdquo;, but with this approach, you go a level deeper. You can use the 3P\u0026rsquo;s (People, Projects, Patterns) as guide to deliver things one says no to. It helps for people to not overcommit. The Learning Question: \u0026ldquo;What was most useful for you?\u0026rdquo; Helps reflection and people to really grow. Double loop learning, you fix it and then create a learning moment. Here the real connections are made and aha moments happen. Similar: \u0026ldquo;What did you learn?\u0026rdquo; \u0026ldquo;What was the key insight?\u0026rdquo; \u0026ldquo;What do you want to remember?\u0026rdquo; Reasons for this question: It assumes the conversation was usefull Asks people to identify the big thing that was most useful It makes it personal It givesy you (the coach) feedback It\u0026rsquo;s learning, not judgement It reminds people how useful you are to them Reasons To Coach # Decrease Overdependence: People can become dependent on you if you usually provide answers, with coaching you make them less dependend on your to find their answers and solutions. Making everyone more selfsufficient and growing. Now you are not the bottleneck anymore. Dont get overwhelmed: By making others selfsufficient, you get more time again and less workload. Become More Connected: You will be more connected to work that matters again and also with the poeople you have coached. 3P Method # Tips/Insights # These questions work via any communication channel Information retention is notourisly bad, so better to help building a habbit of finding answers instead. Get comfortable with silence after asking a question Actuall listen to the answer Acknowledge the answers you get like \u0026ldquo;nice\u0026rdquo;, \u0026ldquo;I like it\u0026rdquo;, \u0026ldquo;Fanastic\u0026rdquo;, \u0026ldquo;Goone One\u0026rdquo;, \u0026ldquo;Yes, Thats good\u0026rdquo;, and \u0026ldquo;mmm-hmmm\u0026rdquo;. Don\u0026rsquo;t offer advice, answers or a solution. Neither do this as rhetorical questions (\u0026ldquo;Have you thought of\u0026hellip;\u0026rdquo;) Only consider offering explitly an \u0026ldquo;idea\u0026rdquo; when you exhausted all the questions. Offer it as an option. Stick to questions that START WITH WHAT, \u0026ldquo;Why\u0026rdquo; can put someone on the defensive, and if you are not fixing the problem, you don\u0026rsquo;t need the backstory. The first 3 questions allow for a robust coaching conversation. Use these 3, combine, probe, and yuou can have a productive conversation. Ask 1 question at a time, and then be quit while waiting for the answer. \u0026ldquo;Coaching For Development\u0026rdquo; vs \u0026ldquo;Coaching For Performance\u0026rdquo; Coaching For Performance: Addressing a specific challenge/problem. Coaching For Development: Foussing to the person who is dealing with the challenge/problem. 3P Method: Choose what to focus on in a coaching session. Which aspect of the challenge/problem might be at the heart of the problem? Projects: What is being worked on. People: The relationship and your role in it. Patterns: Behaviour or ways of working. You can say \u0026ldquo;There are these 3 facets we can look at\u0026hellip; \u0026hellip; Where should we start?\u0026rdquo; and then you can pull in the different facets as you go. Manfred Max-Neef describes 9 universal needs (for question 4) Affection Creation Recreation Freedom Idenity Understanding Participation Protection Subsistence Some of these questions could be effective for facilitation activities. As facilitator you are also trying to be distant from the content and more focussed on guiding the thought process. Examples # What is your number one issue, and how would you fix it? And don’t make comments, just listen. Resources # Book: The coaching Habit "},{"id":6,"href":"/communication/","title":"Index","section":"Knowledgebase","content":" Communication # A wealth of information creates a poverty of attention (Hebert Simon, Nobel laureate and PhD in computer science and organization psychology)\nThe single biggest problem with communication is the illusion that it has taken place.\nWhat I need to know is how your work connects to everything else. Can you explain the essence of it in any way I understand? Can you share your work process in layman\u0026rsquo;s terms? Can you explain why it matters? And why you are passionate about it? If you can do this, you will expand my worldview. And you may do something else. You may spark new creativity or inspiration in me., Every of knowledge is different, but they are all connected.\nChange Management Modes Presenting Propaganda Writing General # Although writing is most commonly thought of as a way of expressing thoughts that we have already formed, it is also an excellent tool for discovering and clarifying thoughts.\nArt of thinking, p15 Most people die vague about life and death \u0026hellip; We imagine other people know definitely their own minds about things important to them and around them. but it is not so, we live in perpetual vagueness \u0026hellip;\nArt of thinking, p15 Solution: Freewriting It consists of focusing on a problem or issue, letting your mind produce whatever assosciations it will and writing down the resulting ideas, without pausing to evaluate any ideas (lets you shut off ideas prematurely). This writing is not intended to be shared, so there are no rules of composition and such. Insights # Exploratory teaches and helps you to think more critically and clearly, cause it improves your \u0026ldquo;way of thinking\u0026rdquo;, how you get there. Teaching you often more and broader on a subject matter. You might naturally also take social implications into account when writing about a scientific invention. Writing code is the same mental process. You make something work (e.g. Make a test pass) You refactor towards cleaner code. You run the tests again to make sure they pass. You iterate As you iterate, you get more clarity how it all fits together, you structure, you process. Programmers are non-fiction writes. Rubber Ducking: As you try to explain a problem, you need to clarify your thoughts about the problem, so you can express them clearly. Often, you will find the answer yourself through this process of clarifying your thoughts. Any thought process works better by writing. Write your journey through the process, clarifying your thoughts. You can reread your thoughts and improve them. If you focus on clarification and simplification, you will get a better understanding. Examples: RFC, Research, Design Document, Diary, Journal, Architecture Proposal, Presentation, Blogging Writing an email in particular benefits from this: Any additional back-n-forth communication that is required due to unclarity, is exhausting. People that blog often, do write clear ones, often have a good understanding of things, through the process of writing a good blog post. Those who do not try effort in improving and simplifying their writing, yet write a lot, will not grow. The more you embrace the process of writing well, the more clear your thoughts become. Shorter writing does not mean shorter time to work on it (\u0026ldquo;If i had more time, i would have written a shorter letter\u0026rdquo;). President Woodrow Wilson on how long it takes to prepare a speech: It depends on the length of the speech If it is a 10 minute speech, it takes me all of 2 weeks to prepare it If it is half hour, it takes me a week If I can take as long as I want to, no preparation at all. I\u0026rsquo;am ready now. Knowledge is stored in the human\u0026rsquo;s mind is multidimensional, hierarchical and cross linking. When talking or speaking, we convert that knowledge into a one dimensional stream of words. That\u0026rsquo;s why, when talking/writing it is important to be linear and and cross link where necessary to avoid ambiguity, certain links are not obvious to the receiver. In the book about Reasoning they the following remark which fits in quite nicely First, the emphasis on communication, on the crucial importance of the social activity of reasoning, means that we can scarcely afford any jargon at all.\nThe Iterative Thought Process # A self defined process based on my insights on becoming a more clear thinker.\nThe \u0026ldquo;The Iterative Thought Process\u0026rdquo; is a more generic version of this. You guide your brain, you structure your thoughts through different mediums (writing, drawing, visualizing, \u0026hellip;). Writing happens to be one of them that works quite well. Visual Methods: Miro board, mind map, Business Model Canvas, Value Proposition Canvas, KanBan Board, \u0026hellip; Key is to have a way to \u0026ldquo;Annotate\u0026rdquo; or \u0026ldquo;Visualize\u0026rdquo; concepts and thoughts and their relations (just like a system) so you can offload it all. Then you can review it, restructure, simplify, prune, do all the usual iterative steps to improve your thoughts and understanding. Steps: Offload your thoughts (all of partially) Structure (relations between them) Prune Review Iterate By offloading, it allows us to reflect on it, and work on it, however, most just offload and keep at that. By offloading, you create room for other thoughts and reflection, play with all elements. By offloading, you can focus on subparts of the whole topic. Did you know that your brain uses a constant amount of energy? Thinking harder, doesn\u0026rsquo;t result in using more energy. That\u0026rsquo;s why, when you focus, other things go to the background. Taking that fact in account, knowing the energy supply is constant, you can offload your thoughts, so the spotlight can then focus on the individual elements and parts, without keeping the big picture in your head. When writing as a part of the thought process: Write in a way that they don’t worry about beings criticized, it would damage/block their train of thoughts and ideas. That’s why a journal works so well. When coaching: During coaching a coach usually focusses on guiding questions (e.g. 5 WHY\u0026rsquo;s.) that help someone clarify someones existing thoughts or teaches them on how to think better, just like with Writing Across The Curriculim. Related Concepts # According to ChatGPT.\nCognitive Load Theory: This theory, developed by John Sweller, explores how human cognitive architecture handles information processing. It posits that learning is more effective when information is presented in a way that reduces unnecessary cognitive load, which aligns with the idea of refining and simplifying thoughts to enhance understanding and communication.\nIterative Design: In design fields, the iterative process involves repeated cycles of prototyping, testing, and refining a product or concept. This approach helps in gradually improving clarity and functionality, akin to refining thoughts or visualizations.\nMetacognition: This is the awareness and understanding of one\u0026rsquo;s own thought processes. Metacognition involves self-regulation of cognition through planning, monitoring, and evaluating, which can include refining and rephrasing thoughts for better clarity.\nVisual Thinking: This is a way to organize your thoughts and improve your ability to think and communicate through visual means. Techniques such as mind mapping, sketching, and diagramming are used to clarify and simplify complex ideas.\nInformation Design: This field focuses on presenting information in a way that is most effective for understanding. It includes principles of clarity, simplicity, and the reduction of unnecessary complexity, often achieved through visual means.\nClarity in Communication: The process of rewriting or rephrasing thoughts to enhance clarity is a fundamental principle in communication studies. Techniques from this field are often employed to ensure messages are clear, concise, and effective.\nRhetoric # By investigating the rhetoric the writer or the reader can better understand the other, which might help to write a better document or to interpret it better. Helps also to understand what influences how a reader receives a message, which might be differ over time.\nWhat is the Writer\u0026rsquo;s Purpose ?\nAs a writer, understanding your purposes can help you in virtually every aspect of your writing process. What influences writers ?\nAs a writer, reflecting on your requirements and limitations can help you decide whether a particular decision-such as choice of topic or the inclusion of evidence from a particular type of source-will help or hurt your chances of accomplishing your purposes. What is the Reader\u0026rsquo;s Purpose ?\nAs a writer, understanding the purposes of your readers can help you create a more effective document. What influences readers ?\nWriters who do not take their readers\u0026rsquo; values and beliefs into account might miss an opportunity to create a more convincing, useful, or acceptable document. Readers\u0026rsquo; knowledge of a particular topic will also affect their reading of a document. When writers assume that readers know more about a topic than they actually do, they can create a document that is difficult to understand. When they assume their readers know less than they actually do, they risk creating documents that repeat information readers already know. In both cases, readers are likely to stop reading the document. What do Writers and Readers Know about Each Other?\nWhat is the Context?\nWAC: Rethoric\nHow to: Brief People # Whenever you need to thoroughly brief a group of people on an important matter, consider using a 5-paragraph format.\nSituation Is about what position we’re in, and why we set out to do what we want to do. You can break this down into three sub-points, like the customer’s situation, the situation of your own company, any extra help that is available, and the current market. Objective Is what we want to achieve. Plan Is how we want to achieve it. Logistics Is about what budget and resources are available, and how they are used. Communications Is about how you’ll be coordinating among yourselves and with others in order to achieve your goal. TIP: Do a follow-up round (hours or days later) to ask for questions, good questions usually don\u0026rsquo;t come up on the spot. There are always questions.\nResources # Art Of Thinking by Vincent Ruggiero. On Writing Well: The Classic Guide to Writing Nonfiction by William Zinsser. Reasoning by Michael Scriven. Ted Talks: The Official TED Guide to Public Speaking by Chris J. Anderson. WAC: Writing Across The Curriculum Writing To Learn by Willian Zinsser. WAC: Rethoric Level Of Disagreement MIT Writing Process "},{"id":7,"href":"/cybersecurity/","title":"Index","section":"Knowledgebase","content":" Cybsersecurity # Certifications # Links # Resources "},{"id":8,"href":"/data-struct-algo/","title":"Index","section":"Knowledgebase","content":" Data Structures and Algorithms # Introduction # Data structures and algorithms help you handle problems in a smart and efficient way.\nIt goes without a saying that they go hand in hand. For solving a problem with a given algorithm efficiently you need to put your data in a appropiate data structure that benefits the algorithm. Using a specific data structure will dictate which algorithms you can use.\nThis topic is very rich and can go very deep. Understanding the core data structures and algorithms helps you to understand what tools are out there, the more specific your challenge becomes that you try to solve, the more specific a certain data structure and algorithm gets.\nThe efficiency of your algorithm strongly depends also on the size of your data set that you need to processl. A certain algorithm might perform better on a small set of data, but much worse on a big data set, therefore it is commong that sort() functions first probe the size of your data set and based on that might choose another algorithm that is known ot perform better for given data set size.\nIt\u0026rsquo;s also worth to take in consideration on how your typical data set will be structured or ordered. Statiscally a data set can be faily ordered already, or it can be a given that your data set is almost always sorted in a certain way. This can have an impact on the algorithm you choose.\nTo be able to decide what is an appropiate algorithm, you must understand the performance (time complexity) expressed in the big O notation. The performance can greatly vary based on the size of the data set and how the typical sample data set that you provide will look like (partialy ordered, always descending, etc\u0026hellip;).\nAs you learn new algorithms, you will find the performance for each of the differen characteristics.\nThe Big O notation # The Big O notation explained\nData Structures # Data Structures often differ in their efficiency for each sorting algorithm and their basic operations (like read, insert, remove, update and search).\nArray Stack Queue Singly-Linked List Doubly-Linked List Hash Table Binary Tree Algorithms # Binary Search Linear Search Bubble Sort Selection Sort Insertion Sort Quicksort Quickselect Graph Algorithms Other topics # NP Completeness General facts and point # We asume a limit on the size of each word of data. When working with inputs of size n, we typically asume that integers are repesented by c lg n bits for some constant c \u0026gt;= 1. We require c \u0026gt;= 1 so that each word can hold the value of n, enabling us to index the indivudual input elements, and we restrict c to be constant so the word size does not grow arbitrarly. Because of this property, we can easily index in an array as each item will have the same word size and we kan O(1) access in an array. Quadratic function an² + bn + c. A randmozed alghoritm takes \u0026ldquo;random choices\u0026rdquo; therefore we can not express the max time, instead we express then the expected running time. Divide-And-Conquer # An algorithm design approach/technique.\nThey break the problem into several subproblems that are similar to the original problem but smaller in size, solve the subproblems recursively,and then combine these solutions to create a solution to the original problem.\nThe divide-and-conquer paradigm involves 3 steps at each level of the recurrursion:\nDivide the problem into subproblems that are smaller instances of of the same problem. Conquer the subproblems by solving them recursively. If the subprobleme sizes are small enough, howver, just solve the subproblem in a straightforward manner. Combine the solutions of the subproblems into the solution for the original problem. When an algorithm contains a recursive call to itself, we can often describe its running time by recurrence equation or recurrence, which describes the overall running time on a problem of size n in terms of the running time on smaller inputs. We can then use the mathematical tools to solve the recurrence and provide bounds on the performance of the algorithm.\nFormula c : Some constant T(n) : Running time on problem of size n D(n) : Time to divide the problem in subproblems. C(n) : Time to combine the solutions of the subproblems into the solution of the original problem. a : # of subproblems each of which is 1/b the size of the original. It takes time T(n/b) to solve one subproblem of size n/b, and so it takes time aT(n/b) to solve a of then. We get recurrance: (correction, O must be Θ here) If the problem is small enough (n \u0026lt;= c) the time might be constant O(1). Elaborate example of the formula\nWhen we have n \u0026gt; 1, n is an exact power of 2 elements applied with the merge sort algorithm: Divide: The divide step just computes the middle of the subarray, wich takes constant time. Thus, D(n) = O(1). Conquer: We recursively solve two subproblems, each of size n/2, which contributes 2T(n/2) to the running time. Combine: Merge procedure on an n-element subarray takes O(n), so C(n) = O(n). Formula: (correction, O must be Θ here) Where c represents the time required to solve problems of size 1 as well as the time per array element of the divide and combine steps. It\u0026rsquo;s perfectly reasonable to divide the orginal problem into sub problems untill the subproblems are small enough, and then use a insertion sort on those subproblems as they might perform better on smaller subproblems/arrays.\nRecursive Case: When a subproblem is large enough to solve recursively.\nBase Case: When a subproblem is smal enough to not recursive.\nMethods or solving recurrences # For obtaining asymptotic Θ or O bounds on the solution.\nSubstitution: Guess a bound and then use math to prove our guess is right. Recursion-tree: Convert the recurruence into a tree whose nodes represent the costs incurred at different levels of the recursion. We use techniques for bounding summations to solve the recurrence. Master: Provide bounds for recurrences of the form T(n) = aT(n/b) + f(n) "},{"id":9,"href":"/facilitation/","title":"Index","section":"Knowledgebase","content":" Facilitation # Facilitation is the process of guiding and managing group activities, discussions, or meetings to ensure effective participation, clear communication, and achievement of objectives. It involves creating an environment that encourages collaboration, creativity, and productivity among participants.\nFacilitation is about helping groups get better results. Groups are often less than the sum of their parts, facilitating aims to reduce that. Training, Mentoring, Group Coaching and Facilitation # They all differ, pick the one applicable to your use case.\nTraining Mentoring Group Coaching Process Facilitation Content Expertise Content Expertise No Content Expertise Process Expertise External External Internal Internal Goal: Subject Understanding Goal: Improve your competency Goal: Change Behavior Goal: Solve a challenge collaboratively Hierarchical Hierarchical Hierarchical Facilitative Energetic, Patient, Speaking Wise, experienced, generous Encouraging, Supportive, Provocative Unbiased, neutral, listening, safe, transparent Source of Table\nType Who controls what is being learned Type of Participation Comments Facilitating The Group Facilitator + entire group Good for collaborative learning Teaching Educator primarily Mostly from educator, little from group Lecturing Educator solely Solely from educator More if a clear message/topic must be transferred Source of Table\nEffective Decisions # ED (Effective Decision) = RD (Right Decision) x CD (Commitment to the Decision)\nUsually we make a (right) decisions but then must built up commitment. With a good facilitation you get commitment as the right solution is built. Therefore, more effective decisions.\nFacilitation Types # Experiential Facilitation: Facilitate experiences for people to learn by doing. Also known as adventure or outdoor education. Examples: Conflict resolution, Communication, and problem solving. Dialogue Facilitation: Building bridges rather than walls. Examples: Put strangers in a circle and talk about given topic(s) (e.g. Politics, Race, Opinions) General Facilitation: More like in business, run a meeting. A general batch, but skills from Experiential and Dialogue facilitation can help tremendously. Most of these notes are about this. The Facilitator # Role # I create the container. The participants create the content. My actions enforce their self-organization. It\u0026rsquo;s their meeting. Not Mine. Meetings are real work (Good facilitator required). Success = a fulfilled purpose. Notes # When being the facilitator, you can\u0026rsquo;t focus on the content and your own opinion. Don\u0026rsquo;t tempt to become the project owner/manager. As facilitator you can/must push action item commitment. Fall back to the excuse \u0026ldquo;as facilitator it\u0026rsquo;s my role to \u0026hellip;.\u0026rdquo; to allow for pushing certain things that are about the process, not the actual content! Evokes creativity and confidence in the group Honest \u0026amp; Transparent : I see \u0026ldquo;this\u0026rdquo; is happening, in a meta way you observe, less about the content, as facilitator you can be 100% content agnostic. Ground and calm Adaptive designer: Design a plan, but can be adaptive when necessary based on the needs. Clarity: Your instructions and guidance must be clear, else people will get lost. F.O.G.S: Framing, Objective, Guidelines and Safety - A framework for clarity. Source Framing: Situate the context. You got to change the context and make it relevant for everybody. Example: Share a story that leads into the purpose or objective of whatever you\u0026rsquo;re doing. Objective: Clarify/share a clear object for given activity or whole session Example: \u0026ldquo;Share (personal) stories, without sharing opinions\u0026rdquo; - now a clear objective was set Guidelines: Rules of engagement. Sometimes adding rules makes your gathering better. Safety: Try to increase both Physical: If people gonna be running around, make it safe to do so. Psychological: People who run meetings often don\u0026rsquo;t mention this type of safety. A highly functional team has a high degree of psychological safety. Do and Don\u0026rsquo;t # Do: Carefully assess needs Stay neutral Have a lot of tools Create open trusting atmosphere and tell why everyone is there. Simple \u0026amp; direct language Conclude meetings on positive notes. Clear steps Clarity in general Don\u0026rsquo;t: Be center of attention Not check in with participants Not listen Too passive Lose track of ideas Put people down Not take breaks Not have alternative approaches to adjust Let discussions go one and on Characteristics # Authenticity: Organizer Look-Out Orchestrator Guide Conflict Solver Active Listener The way that you listen has the power to change what you say. This includes body language. The more \u0026ldquo;listening\u0026rdquo; and positive the body language (e.g. lean in) the more they will share. Coach The Framework # Before Event: Determine Audience, is possible use DISC to prepare. Set Agenda Set objectives Preparation Find Venue \u0026amp; Invites Diets \u0026amp; Foods Deliverables from sponsors Activity Planning Planning During Event Open Event: Start with POWER Statement Agenda (MUST) Way Of Working (OPTIONAL) If you are with a group that often have done this before, this might be implicit. Examples: \u0026ldquo;ELMO\u0026rdquo;: Enough, let\u0026rsquo;s move on. This means what it says, allow stalled conversation to move, as facilitator that\u0026rsquo;s your role. Raise hand for silence Open for questions Be on time E manners (phone gone, camera on, \u0026hellip;) No smoking breaks or else agree in advance to it. Objectives (MUST) Expectations (OPTIONAL) Do Ice Breaker/Check In activity to get people (mentally) in the room. Doing The Work: Follow activities of playbook Adjust activities based on the engagement and proceedings. Close Event: Recap the work done Recap/Tackle outstanding Issues Recap Action List Recap Objectives Recap the results Review Results Review used techniques We did X by doing Y Review group communication We did X by communicating\u0026hellip; (TODO) Review facilitator responsiveness Participate Expectations Final Words Ask Feedback Short: We close, review the session, how it went, what came out and did we satisfy all relevant items? After Event: What to document? Who to brief? Share the feedback. Monitor action items. Prepare agenda for next meeting (if applicable). Debrief session if needed. Dysfunctional Behavior: There are various personas that have pro\u0026rsquo;s and con\u0026rsquo;s. Each persona has methods on how to deal with these. See Communication. POWER Statement # The POWER statement is build out of 5 parts, use this to open your event strong.\nPurpose Outcomes \u0026amp; Deliverables Head - Information, decisions, strategies, shared understanding Heart - Connecting, buy-in, vision, Caring Hand - Next steps, action log, output What\u0026rsquo;s in it for me? Energize \u0026amp; Engage Roles \u0026amp; Responsibilities Of everyone involved (facilitator, participants) Read this out in one statement at the beginning of an event/facilitation.\nExample # Purpose: To have more effective communication. Outcomes \u0026amp; Deliverables: Run more efficient decision processes and meetings between squads and business. What\u0026rsquo;s in it for me? Be less frustrated Become a good communicator Have a better way of working Energize \u0026amp; Engage: To decrease the amount of ineffective meetings To have variety in how to do meetings Roles \u0026amp; Responsibilities To learn, listen and come forward with ideas Activities \u0026amp; Types # And event is made up of activities, there are many variations, but they all try to achieve a certain goal. We can categorize these types based on the goal they try to reach.\nEnergizer: Get blood flowing and get everyone mentally in the room again. Help to return the focus and energy. When too many participants, split in groups, of that shortens the total time of the energizer activity (e.g. playing a game) Be weary of physical energizers, make sure the room is safe and clean. A check-in could ben an energizer also. List: List facts, known things, statements, limitations. Brainstorm: Collect and idea new ideas. Group: Group ideas that are very similar. Prioritize: Prioritize/group items to decided what gets attention first or not at all. Commit: Have participants commit to actions. Reflection # Description: Every participant reflects on the session/workshop/event on a shared template. Example questions: How did I as participant contribute to the success of the workshop? My key takeaways? Most memorable statement made by fellow participant? Did we reach our objectives Visual TIP: Create one dimensional scale from \u0026ldquo;not at all\u0026rdquo; to \u0026ldquo;oh yeah\u0026rdquo; and let people drop a \u0026ldquo;dot\u0026rdquo; on the scale. So you get immediately a visual concentration. Why: Help participants to consolidate their learnings. When: Closing of event Fist of 5 voting # Description: Explain Rules People show scale of agreement/disagreement with the amount of fingers 0\u0026hellip;2 fingers -\u0026gt; Check in 3\u0026hellip;5 fingers -\u0026gt; move forward Be aware of culture specifics here Why: To gauge sentiment quickly When: During event whenever a clarification is needed. Prioritize # Description: Take any set of items (e.g action items, topics, \u0026hellip;) Group them if some are similar (affinity) Now there are 2 methods to choose from: Get Preference from participants Voting (suggested rule: 20% of votes vs the amount of items) Move some dots Use Logic with Eisenhower Matrix Why: Need to decide which topics/items to focus on (take only top 3) Need to decide which topics/items to focus first on When: During event Check-In Exercise # Description: [Typical] Start with asking people to introduce themselves, name, role, fun fact, \u0026hellip; [Alternative] Let people share, for example \u0026ldquo;Top 3 success Factors\u0026rdquo; and \u0026ldquo;Top 3 reasons of failure\u0026rdquo; with post its on a board. Why: Bring people in the room mentally. Break ice. When: Opening of Event Agenda # Description: Share agenda, time slots, and stay on agenda. Ask if anyone has questions Always end on time, skip content if necessary. Why: Expectation Management Respect everyone\u0026rsquo;s time When: Opening of Event Issues - Decisions - Action # Description: A board / visual aid to track about key issues, decisions and action items raised throughout the event. Why: Visibility of all issues, decisions and action items. When: Introduced at opening of event. Maintain it throughout event. Recap at event closing. Weather Check # Description: Pay attention to body language (distracted, \u0026hellip;) \u0026ldquo;Is there anything that keeps anyone from being mentally in the room?\u0026rdquo; \u0026ldquo;Anything that keeps you from being present?\u0026rdquo; When energy is low/distracted \u0026gt; Do an energize activity. Why: Identify the mood of the room. \u0026ldquo;Are we stull in collaborative mood?\u0026rdquo; When: Whenever, should check often. Roman Voting # Description: Explain the rules Thumb up: I Agree Thumb horizontal: I follow the room Thumb down: I disagree Ask A question Why: To determine something quickly When: When you need a quick decision or feedback throughout the event. Commit To Action Items # Description: Get people commit to identified action items. When no response or volunteers \u0026ldquo;Hey X, which opf these 2 items you\u0026rsquo;d like to take?\u0026rdquo; Gentle force is OK. You are not the project manager As facilitator you can be a bit pushier \u0026ldquo;As facilitator I must make sure all action items are taken\u0026rdquo;. Why: Make sure all action items are owned and assigned. When: Throughout or end of event Template # Description: Group prepare statements on flip charts for x amount. Groups switch flip charts to review another group\u0026rsquo;s statements for x amount. Let them put \u0026ldquo;V\u0026rdquo; if they agree Let them put \u0026ldquo;X\u0026rdquo; if they disagree Let then put \u0026ldquo;?\u0026rdquo; if they don\u0026rsquo;t understand Let the groups clarify, after clarification they should choose \u0026ldquo;V\u0026rdquo; and \u0026ldquo;X\u0026rdquo;. Keep going till only disagreements are left Now you have a list of disagreements, you have a list to use, or to continue discussion over them. Different deliverables are possible here. Why: To list disagreements and filter out any agreements, which don\u0026rsquo;t require the participants time. If they agree with it, no need to waste time to it. When: During Event Communication # Use positive and proactive language. \u0026ldquo;Yes, and\u0026hellip;\u0026rdquo; Be aware of cultural differences. Get attention Raise your hand without shouting, till everyone gets quite. Avoid hybrid events (part offline, part online) Don\u0026rsquo;t know answer to question? State honesty. Either get back to them later. Ask the room of anyone knows. Ask random people for input, to keep people on their toes. Create space/time for people before asking \u0026ldquo;Let\u0026rsquo;s take 15 seconds of pause to help everyone come up with a question and then let them ask\u0026rdquo;. Make explicit moments give moments to digest and build courage. Don\u0026rsquo;t ask if people have questions, gently nudge or \u0026ldquo;command\u0026rdquo; them to prepare a question. \u0026ldquo;Take 10 seconds and try to come up with a question\u0026rdquo;. Dysfunctional Behavior \u0026amp; Personas # Dysfunctional behavior (Whispering, sidetracking, arguments, dominant behavior). A good facilitator can navigate this by doing: Conscious Prevention, Early Detection, Clean Resolution\nPersona: Late Comer Larry # Typical Quotes: Sorry I\u0026rsquo;m late\u0026hellip; you know how it is to have back to back meetings DISC Style: All Strengths: Creates opportunity to have the conversation about timeliness with the whole team/group. Weaknesses: Derails meetings (everything gets repeated) Sets a tone of \u0026ldquo;this is not important\u0026rdquo; or disrespect by coming in late. How To Deal: \u0026hellip;todo Persona: Electronics Eddie # Typical Quotes: Nothing will be SAID\u0026hellip; he will be on his cell phone texting the whole time. DISC Style: All Strengths: It\u0026rsquo;s a clear sign that process or content is not engaging this person (may be the wrong person for the meeting) Weaknesses: Disengaged behavior might spread How To Deal: \u0026hellip;todo Persona: Spotlight Sam # Typical Quotes: I/Me/in my experience DISC Style: Influence Strengths: Willing to talk/share to get things started May provide energy with stories Weaknesses: Likes to be heard, so may repeat ideas already states May prevent others from speaking How To Deal: Driven By: Knowledge Handled By: Make them into an expert, you say they are the expert in the room and at a particular point of time they will be asked to present their knowledge. Give them a framework when they can\u0026rsquo;t show off, without interrupting your flow. Persona: Tangent Tom # Typical Quotes: This one time\u0026hellip; What about THIS (very minimally related tangential topic to what we are talking about) DISC Style: Influence Strengths: May provide a burst of (unrelated) energy when things are getting dull. Weaknesses: Pulls focus of the meeting away from the states purpose or objective. How To Deal: \u0026hellip;todo Persona: Passive Aggressive Polly # Typical Quotes: You don\u0026rsquo;t know what she\u0026rsquo;s thinking. Until she says it to someone else outside the meeting. DISC Style: Steadiness Strengths: Wants to maintain harmony (in the meeting) Does not get in the way of ideas being moved forward (in the meeting) Weaknesses: Doesn\u0026rsquo;t share displeasures with the group, talks about it outside the meeting with other people How To Deal: \u0026hellip;todo Persona: Silent Sara # Typical Quotes: I don\u0026rsquo;t want to upset anybody (thought, not said) DISC Style: Steadiness Strengths: Doesn\u0026rsquo;t compete for air time or restate ideas we\u0026rsquo;ve already heard. Brings politeness to the space Weaknesses: Unwilling to share her piece of the puzzle/insight because it may cause conflict May be shy, introverted How To Deal: Driven By: Instructions Handled By: Be specific, give examples and clear outlines of that they need to do. Persona: Snarky Sandra # Typical Quotes: Like they want THAT kind of creativity/honesty/feedback DISC Style: Steadiness/Conscientiousness Strengths: May be the proverbial \u0026ldquo;canary in the coal mine\u0026rdquo; stating something the group is not ready to hear/discuss yet. Weaknesses: May feel like a personal attack to whomever is speaking Could shut down the space/topic How To Deal: \u0026hellip;todo Persona: Analytical Anil # Typical Quotes: We need more data We simply don\u0026rsquo;t know enough to decide this right now. DISC Style: Conscientiousness Strengths: Provides accuracy \u0026amp; details Keeps the group from going off a cliff they don\u0026rsquo;t see. Weaknesses: Analysis Paralysis May overgeneralize to the point of people losing interest all together. How To Deal: Driven By: Safety Handled By: Make them feel safe, by outlining what the outcomes the decision at hand will have. Give them the context that the decision is made, and what for. Give them all the information they should know to feel safe to make a decision. Give Them Reassurance! Persona: Cautious Connie # Typical Quotes: This is too risky Maybe we should wait this out \u0026amp; see what happens DISC Style: Conscientiousness Strengths: Has safety \u0026amp; quality as top priorities Keeps the group from going off a cliff they don\u0026rsquo;t see. Weaknesses: Risk averse, may loose opportunities for growth by waiting too long. How To Deal: Driven By: Safety Handled By: Make them feel safe, by outlining what the outcomes the decision at hand will have. Give them the context that the decision is made, and what for. Give them all the information they should know to feel safe to make a decision. Give Them Reassurance! Persona: Negative Ned # Typical Quotes: This will never work We tried this before \u0026amp; it didn\u0026rsquo;t work then\u0026hellip; it\u0026rsquo;s not gonna work now DISC Style: Conscientiousness/Dominance Strengths: Keeps the group grounded in reality of impediments to success. Weaknesses: Shoots down potentially good ideas before they are fully formed. How To Deal: Driven By: Resistance Handled By: Allow them to get rid of their negative opinions, ask for their opinions proactively. Then bounce back to them \u0026ldquo;What would you do or suggest\u0026rdquo;? Try to make them an expert. Persona: Work-a-holic Warren # Typical Quotes: I\u0026rsquo;ve got more important things to do This meeting is a waste of my time\u0026hellip; I have real projects that need my attention DISC Style: Dominance Strengths: Brings awareness tha the current process/topic may not be adding value. Weaknesses: Disengagement may spread to others (who will soon be getting out their laptops) Voice will be left out of the conversation if he is doing other work How To Deal: \u0026hellip;todo Persona: Dominating Don # Typical Quotes: ELMO! Are we done yet? When will we move to action? DISC Style: Dominance Strengths: Keeps the ball moving forward; moves teams from talking about it into action! Weaknesses: Can shut down a space with potentially overbearing energy. How To Deal: Handled by: They need to feel important Give an important task, so the task gives them an outlet. Giving them an opportunity to present themselves. People who dominate conversation # Flip The Role: Pretext your question with a request for the busy talkers to hold of. People who talk a lot know they talk a lot.\nExample: \u0026ldquo;Hey, if you\u0026rsquo;re typically one of the first people to speak, please hold back and wait to be one of the last (or 3th) to speak, is is possible might not get a chance to speak this time, but I\u0026rsquo;d love to hear some of the voices that not always get heard.\u0026rdquo; This is less directed towards individuals (e.g. hey Mark, I didn\u0026rsquo;t hear you yet.) Creating Space: Create more space/silence for those who are a bit more hesitant to speak, to get their chance.\nTo avoid awkward silence to create productive silence. Build on top of the \u0026ldquo;Flip The Role\u0026rdquo; , by also pretexting, that you want a specific time window before anyone answers, so every can think for a moment. Example: \u0026ldquo;Hey, if you\u0026rsquo;re typically one of the first people to speak, please hold back and wait to be one of the last (or 3th) to speak, is is possible might not get a chance to speak this time, but I\u0026rsquo;d love to hear some of the voices that not always get heard. I am going to ask this question, and then pause in total silence for 5 seconds to wait for everyone to think of their own response before we share.\u0026rdquo; Even if the 5 seconds pass, let them take the time. Change the mechanics: Domination could be because of the people, but because of the structure of the meeting.\nSplit out into groups to have discussions (breakout sessions) and then report back what you heard other people in your group say (not what you said). Steering into the curve: Address the elephant in the room, address this privately first. This is more closer to \u0026ldquo;last resort\u0026rdquo; if others don\u0026rsquo;t work.\nPull person aside: What I\u0026rsquo;d love you to do, I love all your contributions and I am recognizing your contributions are heavier than others and I\u0026rsquo;d like to make space for voices. Can you aim to bear through this awkward silence to give space to other people to share. They won\u0026rsquo;t be surprised about it or new about it that they\u0026rsquo;re dominant about it. You can do it publicly but risky: \u0026ldquo;I can notice we are playing white guy ping-pong, can we step back for a moment and make space for other voices (example from a meeting where it happened the most heavy voices were white, including the facilitator)\u0026rdquo; YouTube Video: Deal with dominant people in conversation\nTools \u0026amp; Equipment # Pens Post-its Flip Charts Projector Miro Software Playbooks/runbooks Playbook # Playbook/runbook Necessary for each event. Clear agenda, duration of each section, expectations of facilitation, expectations of the participants, materials needed. Example State Purpose State Outcome State all steps, each step has a number for easy reference Time length (start/stop times optionally) Activity description Materials required Parking Lot # Technique for difficult participants A placeholder for issues or questions that might need to be dealt with, but at a later point in the session/meeting/workshop. You can either address all of the items at a specific time, or else in 1:1\u0026rsquo;s (e.g. during lunch) but make CLEAR when you will address these. Even if you know these questions will be answered over the workshop, write it down, let them feel heard and appreciated. Goal: Avoid the workshop derailing and explode in discussion. Let people feel heard. It allows them to let go what\u0026rsquo;s in their head, so they can relax more. Examples \u0026ldquo;This is not something we will deal/address now, but I have a section at the end for rapid fire questions and such, what I will do is add this to the parking lot so we can pick it up at the end.\u0026rdquo; \u0026ldquo;I Understand where you are coming from, I have a lot of things to say about that, if you don\u0026rsquo;t mind trusting the process, I will get back to that (putting that in the parking lot)\u0026rdquo;. YouTube Video: Parking Lot Method\nVisualization Techniques # \u0026hellip; See hard copy papers\nGeneral Topics # Failure Reasons # Reasons a facilitation/event can fail.\nPeople don\u0026rsquo;t come prepared or don\u0026rsquo;t do homework (only 30% does it). People don\u0026rsquo;t engage. Wrong people in the room. Participants hogging all the time. Cultural differences and mistakes. People Who Are Late # Fill them in during break, respect others time. DISC # Allows to identify different personalities. If you are able to locate/place your participants, it will be easier to tailor your messaging accordingly.\nRemote Workshops # Be even more clear on purpose, actions and agenda Time in 1 Hour blocks in 4 steps Short theory Discussion/exercise Presentation/reflection Break 10min break/hour Break out groups max 4 people to keep engagement + accountability Encourage to keep video on. Not just politeness, but also more engaging. Distribute air time among participants. Randomly ask different participants questions to keep em on their toes. Emphasize start and end Check in question to have everyone focus on the event Have enough wrap-up time Meeting Formats # Lean Coffee # raw a simple Kanban board with three columns : Todo, In Progress and Done. This board will help the participants visualize the progress during the discussion. After a quick introduction allow 5 minutes to the participants to individually brainstrom topic ideas. Ask everyone to write a post-it note for each topic they want to discuss. Everyone takes turn and quicky pitch his ideas: What topics they want to discuss and why. Each topic ideas is added to the TODO column on the board. You have an overview of all the topics the individuals want to talk about. Each participant is granted two votes. Voting twice for the same item is permitted. Everyone gather around the board and put a dot on their two favorites topics. Add all votes and priorize/order the topics on the board: the most voted item will be discussed first. If there’s a lot of ideas on the board some items probably did not received any votes: you will not discuss those topics during the session. This is a great way to avoid boring discussion: you only talk about what is interesting to the group. Once you have a prioritized list of the topics you want to discuss, you can move the top item into the In Progress column. Set a timer to 5 minutes and you’re now ready to discuss the topic. Discuss the topic until the time is out ! Have a silent roman vote: thumb up if you want to continue the discussion, thumb down if you want to move to the next topic. If you have a majority of thumbs up : reset the timer and continue the discussion. If you have a majority of thumbs down: move the topic to the Done column and move to the next topic ! At the end of the session take time to elicit key take-aways: what did we learn ? What actions can we take ?* Source\nPersonal Ideas # Use the business idea testing experiments to make a list of potential facilitation events. How can we use the wisdom of writing clearly, structuring thoughts and the thought process for facilitation events? A small assignment where we ask people to write and think for themselves before joining? Think about how this lady with math, asking students to write first 5 min on how they would go about solving something a math problem that was information incomplete (“how would you try to solve this, if i were to give more information”). Quote from WAC [T]alk is important for sharing, clarifying, and distributing knowledge among peers, while asking questions, hypothesizing, explaining, and formulating ideas together are all important mechanisms during peer discussions. Analytical writing is an important tool for transforming rudimentary ideas into knowledge that is more coherent and structured. Furthermore, talk combined with writing appears to enhance the retention of science learning over time. (566)\nCan we use Blooms Taxonomy for facilitating ? Use the Coaching Habit questions as inspiration of what you try to get from an activity (Acitvity Types). For some people, you can use a small kan ban as a visual facilitation tool. Resources # YouTube Channel: Chad Littlefield YouTube Channel: Facilitating XYZ YouTube Channel: AJ\u0026amp;Smart YouTube Channel: Adriana Girdler (Project Management)) YouTube Channel: workshop.work (Podcast on Workshop Facilitation) YouTube Channel: North Star Facilitators Book: Pocket Guide to Facilitating Human Connection - Touches on Experiential Facilitation Book: Ask Powerful questions - Touches on Dialogue Facilitation YouTube Video: How To Think Faster YouTube Video: Deal with dominant people in conversation Training: The Effective Facilitator YouTube Video: Process Facilitation Explained "},{"id":10,"href":"/it-strategy/","title":"Index","section":"Knowledgebase","content":" IT Strategy # Platform Strategy "},{"id":11,"href":"/linux-lpic-1/","title":"Index","section":"Knowledgebase","content":" LPIC-1 # About Linux # Components of Linux\nBoot Loader Software manages boot process till the OS starts to load The Kernel Core of OS, manages OS, CPU and peripherals Daemons Processes lurking in the background that start during booth or after login (e.g. time) Shell Graphical Server Subsystem to display graphic AKA x-server Desktop Environment Actual GUI for the user Applications Why Linux ?\nFree Stable Secure Open Source Free to run the program for any purpose. Free to study how the program works Free to change how the program works Free to redistribute copies Distributions\nWhat is a distribution ? Collection of software Package management system Helps you install, upgrade and remove software Keeps your server up to date Popular Examples Red Hat CentOS (based on red hat) Fedora Debian Ubuntu Mint SuSE Gentee Arch \u0026hellip; VirtualBox Bridged Networking\nIf you do this, instead of NAT, you can SSH into the box instead of using the VirtualBox UI System Architecture # Boot the system\nUEFI is the new version of BIOS BIOS booting -\u0026gt; BIOS boot from particular disk -\u0026gt; This disk has a MBR (Master Boot Record), which stores the Boot Loader -\u0026gt; The boot loader knows where the kernel is on disk and boot the OS UEFI UEFI Boot Loader (which lives on your disk) (is not in the MBR) This boot loader calls the kernel, which boots the OS MBR : Information in the first sector of a disk that tells where and how the OS is. GRUB (Grand Unified Bootloader) : Boot loader package that supports multiple OS\u0026rsquo;s on a ps You can modify the settings during bootup and make them persist by directly modifying the config files used by the GRUB For Ubuntu in VirtualBox, tap esc during bootup Kernel is lowest level of replacable software to your hardware Once the Kernel has attached the root file system, it will run a program called init init is always the first process ran by a linux system, therefor, it gets always a PID of 1 There are a few different init programs that exist sysvinit : Which based on sysv, oldest and first systemd : Low memory boot process, mainstream, almost used everywhere now upstart : Created by Ubuntu, but they switched to systemd in the end. quiet for kernel param is supress most boot messages. So less verbosity for bootup Determine and configure hardware settings\nudev : Device manager for your kernel Gives low level access to the linux device tree Handles user space events (happens when hardware is removed or added to the system) Eg. Loading firmware Provided by temporary filesystem (tmpfs) This is how udev provides access, which is mounted to /dev on startup /etc/udev/rules.d : Folder for custom rules for the device manager udev. You can create rules for what should happen/ran when something is plugged in or unplugged dbus Inter-process communication mechanism Framework that allows processes to talk to each other Secure Reliable Provides high level OOP interface sysfs Virtual filesystem Presents information about various kernel subsystems Hardware devices Drivers Mounted to /sys procfs Similar to sysfs Presents information about various processes Presents information about system information mounted to /proc Can be used to interface with the kernel Change parameters on the fly Each running process will have a directory in /proc/\u0026lt;PID\u0026gt; + various other stuff eg. /proc/cmdline -\u0026gt; Kernel name from bootup eg. /proc/version -\u0026gt; Kernel version eg. /proc/cpuinfo -\u0026gt; CPU info lsmod List all Kernel modules in use and by which modules modprobe Add or remove loadable kernel modules to/from the kernel udev relies upon modprob to load drivers for automatically detected hardware rmmod Remove kernel module (prob need root for that) lspci Shows all PCI connected devices to the system Show Device IRQ settings Runlevels and boot targets\nRun Level : Number between 0 \u0026lt;-\u0026gt; 6 (max 9), determines which scripts/programs are run Levels : 0 - Halt or shut down system 1 - Single user mode 2 - Multi user mode without networking 3 - Normal boot (multi user mode + networking) 4 - Unused/customizable 5 - Run level 3 + GUI display manager (if installed, so the graph env) 6 - Reboot Based on the run level, more or less scripts will be ran which are located in different places (e.g. Systemd or sysv) inittab (came with sysv) Ubuntu : /etc/rc0.d \u0026hellip; /etc/rc6.d folders with scripts that are ran based on correlating run level. rcS.d us ran for any run level. This is still there for compatibility reasons systemd run levels : Also has scripts System scripts /etc/systemd/system Package Scripts /usr/lib/systemd/system /etc/systemd/system takes precedence over /usr/lib/systemd/systen Uses targets (similar-ish to the other run level style) Run Level - Systemd Target 0 - runlevel0.target, poweroff.target 1 - runlevel1.target, rescue.target 2,4 - runlevel2.target, runlevel4.target, multi-user.target 3 - runlevel3.target, multi-user.target 5 - runlevel5.target, graphical.target 6 - runlevel6.target, reboot.target emergency - emergency.target with init/telinit you can tell what level to run systemctl\nHow you drive/control systemd How you start, stop, restart applications (just like kubectl) E.g. Status sound card : sudo systemctl status sound.target stop sound card : sudo systemctl stop sound.target Status sound card : sudo systemctl status sound.target start sound card : sudo systemctl start sound.target Status sound card : sudo systemctl status sound.target Commands\nps : List active processes ps aux | head : Shows the top processes where you will seee /sbin/init dmesg : Kernel messages logged from the last bootup head : take first n lines tail : take last n lines less : page through a long result man : manual sudo wall : Send a message to anyone logged in/has open shell (like announce a reboot) which : Where is an app running from? Linux Installation and Package Management # Design hard disk layout\n/ : root /usr : user binaries installed /home : /boot : All related to booting /var : Variable data (e.g. system logs \u0026hellip;) /tmp : Everyone on the system can write to Partitions\nDivide storage in multiple pieces Allows dual booting Separation of files Data organization System protection e.g. Separate partition for each user to separate and safeguard When you create a partition you need to mount them to directories. Every path in linux can be mounted to We can mount to : /home /var /tmp /home/nick/blah/ Remember like with Docker. You can have a folder /home/ian/dbdata with data in it. When you mount a partition to /home/ian/dbdata, the data in there will be hidden and overtaken with this mounted partition (like a volume with docker) Once you unmoun the partition from that folder, the original data is again visible and accessible. Swap\nSwap is a partition, used in case the RAM is full, Swap is used Unused pages fo the RAM will be saved in the SWAP partition LVM\nLogical Volume Manager (like Disk Manager windows, on steroids) Allows to split disks into pools (Pools are also known as PE, Physical Extends) Create partitions from pools Can grow or shrink partitions Install a boot manager\nBoot Loader\nBoots a linux system Runs before the OS Can be configured from the operating system common boot loaders : LILO GRUB Legacy GRUB2 Configuring the /boot/grub/grub.cfg results in editing your boot loader logic\nAlthough the above is the auto generated result of /etc/grub.d and /etc/default/grub using grub-mkconfig\ngrub-probe\ngrub-install : To install grub to the MBR of the specified disk (in case that didn\u0026rsquo;t happen yet)\nRevise\nupdate sudo vi /etc/default/grub file run sudo update-grub restart to see changes in action Manage Shared Libraries\nLibraries : So typical libs/packages that bash scripts or actual code can use Key properties Shared Reusable Linking When your application wants to use these libraries, they should be linked to them Static Linking : Library is included in the application (each app has its own copy) Dynamic Linking : Different applications using the exact same copy of the library Update libraries in a single place /etc/ld.so.conf lists the locations of the shared libraries on your system. include statements means it was split into other linked files ldd : ldd prints the shared objects (shared libraries) required by each program or shared object specified on the command line. e.g. ldd /bin/ls Use debian package manager\ndpkg : Debian Package Manager install/upgrade/remove software low level tool (Does not automatically installes dependencies) apt Advanced packaging tool high level tool install/upgrade/remove software handles upgrading of entire system Handle all package dependencies automatically Uses online repositories /etc/apt/sources.list is the list for mirrors of apt and specifics on which repos per mirror to use main : Officially supported software restricted : supported software (not free under completely free license) xenial : current version universe : community maintained software multiverse : Not free software apt-get update : update local package lists apt-get install \u0026lt;name\u0026gt; : Install software apt-get remove \u0026lt;name\u0026gt; : Uninstall software ! does not remove remaining config files, use dpkg --purge \u0026lt;name\u0026gt; for cleanup apt-cache depends \u0026lt;name\u0026gt; : Show what a app depends on apt-cache search \u0026lt;name\u0026gt; : Search for packages with a particular name apt-get upgrade : Upgrade all current installed packages (respecting semver) apt-get dist-upgrade : upgrade everything and remove anything unused wget Download a file to current location\nUse RPM and YUM package manager\nRPM RedHat Package Manager rpm command Low level tools install/upgrade/remove software YUM Yellowdog update/modifier replaced YUP (yellowdog updater) Utilites online repositories manages dependencies Quiz\nHow do you temporarily add a directory to your shared library path? - LD_LIBRARY_PATH GNU and Unix Commands # Devices, filesystems and filesystem hierarchy # Shells, scripting and data management # User Interface and Desktop # Manage user and group accounts and related system files # Essential System Services # Networking fundamentals # Security # "},{"id":12,"href":"/network/","title":"Index","section":"Knowledgebase","content":" Networking 101 # Summary of network relevant topics regarding computers.\nGeneral Topics # A protocol stack is the collection of protocols (given protocol for each layer) that is used by a given system. A network architecture is the collection of layers and protocols. In networking you have also the concept of a sender sending more than a receiver can handle (like back pressure with streams). In networking this is often named flow controll. In networking you have often 2 types of delivery datagram: Just a stream of data, no need for guarantee of delivery (eg. a stream, video streaming). Usually have a concept of a \u0026ldquo;connection\u0026rdquo;. confirmed datagram: Sent distinct parts, guaranteed delivery. Usually don\u0026rsquo;t talk about a \u0026ldquo;connection\u0026rdquo;. OSI model was created before protocols, TCP/Ip after protocols. That\u0026rsquo;s why it stuck more and had no \u0026ldquo;flaws\u0026rdquo; for new use cases. Introduction OSI model # OSI: Open Systems Interconnection Model\nStandardizes communication functions of telecommunication/computer systems with standard communication protocols. Original model defines 7 abstraction layers. A layer servers the layer above and served by the layer below. ISO standard Each level has a PDU, Protocol Data Unit (e.g. Data, Package, Segment, Frame, \u0026hellip;) A PDU has a payload (Service Data Unit, SDU) + protocol related header and footer. Some protocols might define \u0026ldquo;sublayers\u0026rdquo; for the benefit of the protocol design. Just a model, nothing in the real world adhere\u0026rsquo;s to it. Communication protocols enable an entity in one host to interact with corresponding entity at the same layer in another host.\nSome layers allow variable length of data, but lower layers might have to adhere to fixed length. These layers will split the data into smaller parts.\nThe 7 Layers\nLayer 1: Physical - Transmission of raw data between devices over a medium. Converts bits to electric/radio or optical signals. Layer 2: Data Link - Node to node transfer. Detects/corrects errors in physical layer. Defines protocol to establish and terminate connections between physical devices + flow control. (e.g. 802.11 Wi-Fi) Layer 3: Network - Functional and procedural means of transferring variable length packets from one node to another in different networks. At this point there is a concept of \u0026ldquo;address\u0026rdquo; for each node and a packet can be \u0026ldquo;routed\u0026rdquo;. At this point the packet does not travel perse between 2 devices that are physically directly connected. More details later. Layer 4: Transport - Functional and procedural means of transferring variable length packets from source to destination while maintaining QoS functions. This is end-to-end at this point. You talk with the target device, not an in between node. Layer 5: Session - Controls (establish, manage and terminate) connections between computers. Provides full-duplex, half-duplex and simplex operation. RPCs usually live on this layer. Layer 6: Presentation - Establish context between application-layer entities. Translates between network and application formats. So translates data into the format that he application layer accepts. Layer can also include compression functions. Layer 7: Application - Layer closest to end user, communicating with the software application. Cross-layer functions: Services not tied to a given layer, may affect multiple layers (e.g. security).\nComparison with TCP/IP model:\nInternet Application Layer: Maps to OSI\u0026rsquo;s Application (#7), Presentation (#6) and Session Layer (#5). TCP/IP Transport Layer: Graceful close functions of OSI Session (#5) and Transport layer (#4). Internet Layer: OSI Network Layer (#3) Link Layer: OSI Data Link Layer (#2) and Phsyical Layer (#1) Notice how OSI Session layer relates to Internet Application and Transport layer of TCP/IP. A layer has a \u0026ldquo;Service\u0026rdquo; which is the primitives/operations that it exposes to the higher level layer using our given layer, see it as the interface. The protocol is rather the rules for a the same layer but between different machines, the peer layers. (e.g. how is the data structured for given layer)\nIntroduction TCP/IP Model # The 4 Layers\nLayer 1: Physical - The model does not specify much about this layer. As long it can serve the upper layer. Layer 2: Network/Internet - The routing logic from end2end across multiple nodes. Connection-agnostic layer. Defines an official packet format and protocol, named IP (internet protocol). Layer 3: Transport - Layer allows peer entities to have conversations with source and target entities. 2 end2end protocols available on this level TCP (Transmission Control Protocol) - Delivery guarantee, reassembled out of order messages. Also does control flow. UDP (User datagram Protocol) - No delivery guarantee, connectionless, stream basically. Also for single request/reply queries. Speed is more important than accuracy. Layer 4: Application - Experiende said that abstractions of session/presentation layers were not necessary. Examples are TELNET, FTP, SMTP, HTTP, DNS, NNTP, \u0026hellip;) Compared to OSI model\nLayer 1: Physical - Encapsulates \u0026ldquo;Physical\u0026rdquo; layer and \u0026ldquo;Data Link\u0026rdquo; layer of ISO Layer 2: Network/Internet - Same as \u0026ldquo;Network\u0026rdquo; layer of ISO Layer 3: Transport - Same as \u0026ldquo;Transport\u0026rdquo; layer of ISO Layer 4: Application - Encapsulates \u0026ldquo;Session\u0026rdquo;, \u0026ldquo;Presentation\u0026rdquo;, and \u0026ldquo;Application\u0026rdquo; layer of ISO The Physical Layer # "},{"id":13,"href":"/nodejs-streams-and-networking/","title":"Index","section":"Knowledgebase","content":" Streams and Networking # These are notes based on the Frontend Masters course by James Holiday (aka Substack). Link here\nNetworking, servers, and clients # Networking and Packets # Servers and clients\nAny networked computer can be a server Aby networked computer can be a client These are roles rather. A payload is often broken up in multiple packets. Which you can receive out of order.\nTCP vs UDP\nTCP : Reliable transport; If no ACK (acknowledged) came from the other end, we RESENT it. UDP : Unreliable transport; Fire and forget, there is no confirmation from the other end if a packet was received. Use case : Streaming audio/video (some use TCP now), games Protocols and Ports # Language that computes programs speak to each other, examples of protocols:\nHTTP - Browse web pages (port 80) HTTPS - Browse web pages with encryption (port 443) SMPT - Send an receive emails (port 25) IMAP, POP3 - Load emails from an inbox IRC - Chat (port 6667) FTP - File transfer (port 21 for control) SSH - Remote shell over an encrypted connection (port 22) SSL - Low-level secure data transfer (used by HTTPS) Most services have (often) one or many default ports. A computer can have many services, ports differentiate between the services on a system. (range 1 - 65535). We can have a service listen to any port, but we have custom, default assignments.\nmysql - 3306 postgresl - 5432 couchdb - 5984 By default, systems can only listen to ports below 1024 as the root user.\nServers and Clients # A server means you are listening for incoming connections. Clients initiate the connections and connects to servers. P2P : This is a third role, aside of client and server. Here clients establish connections directly with other clients. There are no fixes servers. Example is webrtc : Usually use for video and audio chat. Else you get latency if it all goes through a centralized server. Netcat # Plain text server start server: nc -l 5000 start client: nc localhost 5000 Happy chatting HTTP and Headers # HTTP : Hyper Text Transfer Protocol, how web servers and web browsers communicate. HTTP requests begin with a VERB GET - Fetch document POST - Submit a form HEAD - Fetch metadata about a document PUT - Upload a file Headers Key value key: value, colon separated, space not mandatory Example of creating a HTTP conform message $ nc google.com GET / HTTP/1.0 HOST: google.com --\u0026gt; A server might serve multiple domains, or LB. The format is a bit like this plain text snippet, notice the 2 returns before the body starts: VERB PATH HTTPVERSION HEADERS ... BODY ... and the response like HTTPVERSION STATUSCODE STATUSMESSAGE HEADERS ... BODY ... HTTP Post # Taken the following response\nHTTP/1.1 200 OK Date: Mon, 12 Jan 2015 06:37:51 GMT Connection: keep-alive Transfer-Encoding: chunked \u0026lt;- Gonna send body in chunks, send links for chunks. Server doesn\u0026#39;t know in advance how long the response will be. 3 \u0026lt;-- Hex value of the cuncked part oi \u0026lt;-- payload 4 \u0026lt;-- Hex value of the cuncked part ok \u0026lt;-- payload 0 \u0026lt;-- End, finished Curl # $ curl -s http://substack.net \u0026lt;-- Do GET and print body $ curl -i http://substack.net \u0026lt;-- Print body and headers $ curl -I http://substack.net \u0026lt;-- Print only headers # -s gets rid of progress output # Use -X ti set the HTTP VERB and -d for form paramters $ curl -X POST http://substack.net $ curl -X POST http://substack.net -d title=whatever -d date=10000 # You can set headers with the -H flag $ curl http://substack.net -H \u0026#39;Content-Type: application/json\u0026#39; SMTP # Similar to HTTP as it has status codes and such. Like HTTP, you have a first block with \u0026ldquo;headers\u0026rdquo;, so all the metadata, from, to , subject, and then there is a body What we\u0026rsquo;re actually sending. Body is ended with a line with only a . and new line. IRC # Another text based protocol. So HTTP, SMTP and IRC are all plain text protocols that just follow a certain text layout and a port to listen on.\nIRC commands nick - identify as a user user - also identify as user join - join a channel privemsg - send a message to a channel Binary Protocols and Inspecting Protocols # Test based protocols are easy to inspect with a sniffer and such\nWith Binary protocols you can\u0026rsquo;t messages plain text sadly. We need to write programs that unpack the incoming bytes, and pack the outgoing bytes according to given specification.\nExamples of binary\nssh (except from initial greeting) Inspecting protocols\nFor in/out local eth/wifi card Wireshark for GUI tcpdump for CLI $ sudo tcpdump -X --\u0026gt; start listening; $ sudo tcpdump -A --\u0026gt; start listening with other formatting; $ sudo tcpdump 'tcp port 80' '-X -\u0026gt; string contains a query/filter; Streams # Node.js has a handy interface for shuffling data around called streams.\nStream Origins\nWe should have some ways of connecting programs like garden hose screw in another segment when it becomes necessary to massage data in another way. This is the way of IO also. Doug McIlroy, October 11, 1964\nThinks also of how we pipe in *nix systems between programs.\nWhy Streeams?\nWe can compose streaming abstractions We can operate on data chunk by chunk Composition\nJust like how in unix we can pipe commands together, we can pipe streams together\n$ cat file \u0026gt; jq -name \u0026#39;.age\u0026#39;\u0026gt; ... Simple example # a nodejs equivalent what $ cat does.\nconst fs = require(\u0026#39;fs\u0026#39;); fs.createReadStream(process.argv[2]) .pipe(process.stdout); Transform data Example # const fs = require(\u0026#39;fs\u0026#39;); const through = require(\u0026#39;through2\u0026#39;); fs.createReadStream(process.argv[2]) .pipe(through(toUpper)) .pipe(process.stdout); function toUpper(buf, enc, next){ // buf is a binary description of the data // Output should be a buffer or string next(null, buf.toString().toUpperCase()) } Read from a file # const through = require(\u0026#39;through2\u0026#39;); process.stdin .pipe(through(toUpper)) .pipe(process.stdout); function toUpper(buf, enc, next){ // buf is a binary description of the data // Output should be a buffer or string next(null, buf.toString().toUpperCase()) } With Node Core # const { Transform } = require(\u0026#39;stream\u0026#39;); const toUpper = new Transform({ transform: function(buf, enc, next) { next(null, buf.toString().toUpperCase()) } // ... and other hooks }) process.stdin .pipe(toUpper) .pipe(process.stdout); flush is what happens when a stream finishes.\nBit on package through2 # With through there are 2 parameters: write and end. Both are optional.\nthrough(write, end)\nfunction write (bug, enc, next) {} function end () {} Call next() when you\u0026rsquo;re ready for the next chunk. If you don\u0026rsquo;t call next(), your stream will hang!\nCall this.push(VALUE) inside the callback to put VALUE into the stream\u0026rsquo;s output.\nUse a VALUE of NULL to end the stream. This can happen when you need to buffer a certain amount of bytes before you can do something. If you need 100 Byte, you keep doing this.push(VALUE) on each chunk received and just call next() until your buffer size is big enough and take proper actions.\nConcat stream # npm install concat-stream\nConcat-steam buffers up all the data in the stream:\nconst concat = require(\u0026#39;concat-stream\u0026#39;); process.stdin.pipe(concat(function( body) { console.log(body.length); })) You can only write to a concat-stream, You can\u0026rsquo;t read from a concat-stream. Keep in mind that all data will be in memory.\nGOOD TO KNOW : When you are listening to a STDIN, it will keep taking input till it receives a CTRL + D.\nExample of basic HTTP Server with concat stream # const concat = require(\u0026#39;concat-stream\u0026#39;); const through = require(\u0026#39;through2\u0026#39;); const http = require(\u0026#39;http\u0026#39;); const qs = require(\u0026#39;querystring\u0026#39;); const SIZE_LIMIT= 20; var server = http.createServer(function(req, res) { req .pipe(counter()) .pipe(concat({encoding: \u0026#39;string\u0026#39;}, onBody)); function counter() { var size = 0; return through(function(buf, enc, next) { size += buf.length; if(size \u0026gt; SIZE_LIMIT) { next(null, null); }else{ next(null, buf); } }) } function onBody (body){ var params = qs.parse(body); console.log(params); res.end(\u0026#39;ok\\n\u0026#39;); } }); server.listen(5000); Stream Types # Readable streams - Produces data : You can pipe FROM it\nreadable.pipe(A) Key Methods (on each stream you can write to: writeable, transform and duplex) .write(buf) .end() .end(buf) .on('finish', function () {}) (...).pipe(stream) Example const fs = require(\u0026#39;fs\u0026#39;); const w = fs.createWriteStream(\u0026#39;cool.txt\u0026#39;); w.once(\u0026#39;finished\u0026#39;, function() { console.log(\u0026#39;FINISHED\u0026#39;); }); w.write(\u0026#39;Hi\\n\u0026#39;); w.write(\u0026#39;Wow\\n\u0026#39;); w.end(); Writeable streams - Consumes data: you can pipe TO it\nA.pipe(writeable) Key Methods stream.pipe(..) stream.once('end, function () {}) stream.read() stream.on('readable, function () {}) Example const fs = require(\u0026#39;fs\u0026#39;); const r = fs.createReadStream(process.argv[2]); r.pipe(process.stdout); Modes, streams can be in paused or flowing mode. By default all readable are in paused mode. Default with automatic back pressure Data is consumes as soon chunks are available (no back pressure) Transform streams - Consumes data, producing transformed data\nA.pipe(transform).pipe(B) Readable + writeable stream where input =\u0026gt; transform =\u0026gt; output. Key Methods : All the readable AND writeable methods. Duplex streams - Consumes data separately from producing data. (e.g a bidirectional network stream)\nA.pipe(duplex).pipe(A) -\u0026gt; A and duplex are both gonna be a duplex Readable + writeable stream where input is decoupled from output. Like a telephone! Key Methods : All the readable AND writeable methods. bidirectional connections basically. A duplex stream can pipe in itself. Because read/write is decoupled. Imagine you have one pipe with just two (I and O) lines in it. And you just connect them. Example: Echo Server const net = require(\u0026#39;net\u0026#39;); net.createServer(function(stream) { stream.pipe(stream); // This does not create an infinite loop, just a echo server }).listen(5000); ▶ nc localhost 5000 hi hi there there Ammend Example: Proxy const net = require(\u0026#39;net\u0026#39;); net.createServer(function(stream) { stream .pipe(net.connect(5000, \u0026#39;localhost\u0026#39;)) .pipe(stream) }).listen(5001); ▶ nc localhost 5000 hi hi there there Simple VPN with password # echo.js\nJust output what comes in. const net = require(\u0026#39;net\u0026#39;) net.createServer(function (stream) { stream.pipe(stream) }).listen(5000) vpn.js\nConnects to the echo server. Takes incoming connections Decrypts incoming connection Sends it plain text to the echo server Get\u0026rsquo;s the plain text response from the echo server Encrypts the plain test response Returns the encrypted response const net = require(\u0026#39;net\u0026#39;) const crypto = require(\u0026#39;crypto\u0026#39;) const pump = require(\u0026#39;pump\u0026#39;) const pw = \u0026#39;abc123\u0026#39; net.createServer(function (stream) { pump( stream, crypto.createDecipher(\u0026#39;aes192\u0026#39;,pw), net.connect(5000,\u0026#39;localhost\u0026#39;), crypto.createCipher(\u0026#39;aes192\u0026#39;,pw), stream, function (err) { console.error(err) } ) }).listen(5005) vpn-client.js\nConnect to stdin (Might continue only once a buffer is full) Encrypt the plain text from the std in Send encrypted request it to the vpn server Decrypts the response that came back from the vpn server Writes the decrypted response as the plain text to the stdout const net = require(\u0026#39;net\u0026#39;) const crypto = require(\u0026#39;crypto\u0026#39;) const pw = \u0026#39;abc123\u0026#39; var stream = net.connect(5005,\u0026#39;localhost\u0026#39;) process.stdin .pipe(crypto.createCipher(\u0026#39;aes192\u0026#39;,pw)) .pipe(stream) .pipe(crypto.createDecipher(\u0026#39;aes192\u0026#39;,pw)) .pipe(process.stdout) Object Streams # Normally you can only read and write buffers and strings with streams. However, if you initialize a stream in objectMode, you can use any kind of object (except for null):\n// This can be also done with native modules const through = require(\u0026#39;through2\u0026#39;) const tr = through.obj(function(reow, enc, next) { next(null, (row.n * 1000) + \u0026#39;\\n\u0026#39;) }) tr.pipe(process.stdout) tr.write({n : 5}) tr.write({n : 10}) tr.write({n : 3}) tr.end(); When piping a object stream, the consuming stream should also be able to do objectMode.\nCore Streams # APIs # Many of the APIs in node core provide stream interfaces:\nfs.createReadStream() fs.createWriteStream() process.stdin, process.stdout ps.stdin, ps.stdout, ps.stderr next.connect(), tls.connect() net.createServer(function(stream) {}) tls.createServer(otps, function(stream) {}) Child Process also uses streams # const { spawn } = require(\u0026#39;child_process\u0026#39;); const ps = spawn(\u0026#39;grep\u0026#39;, [\u0026#39;potato\u0026#39;]); ps.stdout.pipe(process.stdout); // We pipe the output of the child process to our stdout ps.stdin.write(\u0026#39;cheese\\n\u0026#39;); ps.stdin.write(\u0026#39;potato\\n\u0026#39;); ps.stdin.end(); HTTP core streams # // We receive a request // req: readable, res:writeable http.createServer((req, res) =\u0026gt; ({})) // We make a request // req: writeable, res:readable var req = http.request((res) =\u0026gt; ({})) Crypto Streams # crypto.createCipher(algo, password) - transform stream to encrypt crypto.createDecipher(algo, password) - transform stream to decrypt crypto.createCipheriv(algo, key, iv) - transform stream to encrypt with iv crypto.createDecipheriv(algo, key, iv) - transform stream to decrypt with iv crypto.createHash(algo) - transform stream to output cryptographic hash crypto.createHash(algo, key) - transform stream to output HMAC digest crypto.createSign(algo) - Writeable stream to sign messages crypto.createVerify(algo) - Writeable stream to verify signatures const { createHash } = require(\u0026#39;crypto\u0026#39;); process.stdin .pipe(createHash(\u0026#39;sha512\u0026#39;, { encoding : \u0026#39;hex\u0026#39; })) .pipe(process.stdout); Don\u0026rsquo;t forget, when you run this, to use CTRL + D to get the hash. It basically says, pull my shit.\nZlib core streams # zlib.createGzip(opts) - transform stream to compress with gzip zlib.createGunzip(opts) - transform stream to uncompress with gzip zlib.createDeflate(opts) - transform stream to compress with deflate zlib.createInflate(opts) - transform stream to uncompress with deflate zlib.createDeflateRaw(opts) - transform stream to compress with raw deflate zlib.createInflateRaw(opts) - transform stream to uncompress with raw deflate zlib.createUnzip(opts) - transform stream to uncompress gzip and deflate Split2 use case # Split input on newlines\nconst split = require(\u0026#39;split2\u0026#39;); const through = require(\u0026#39;through2\u0026#39;); let count = 0; process.stdin .pipe(split()) // This splits on new lines .pipe(through(write, end)); // Now we increase the count per chunk (each being a new line) and log total count function write(next) { count++; next(); } function end() { console.log(count); } Web Socket # Websocket streams # Streaming websockets in node and the browser.\nconst http = require(\u0026#39;http\u0026#39;); const ecstatic = require(\u0026#39;ecstatic\u0026#39;); const through = require(\u0026#39;through2\u0026#39;); var server = http.createServer(ecstatic(__dirname + \u0026#39;/public\u0026#39;) server.listen(3000); const wsock = require(\u0026#39;websocket-stream\u0026#39;); wsock.createServer({server}, function (stream) { // stream is a duplex stream stream.pipe(loud()).pipe(stream); }) function loud () { return through(function(bug, enc, next){ next(null, buf.toString().toUpperCase()); }); } Websocket Node Client # const wsock = require(\u0026#39;websocket-stream\u0026#39;); const stream = wsock(\u0026#39;ws://localhost:500\u0026#39;); process.stdin.pipe(stream).pipe(process.stdout); Stream Modules # Collect Stream # Collect a stream\u0026rsquo;s output into a single buffer. Useful for unit tests. For object streams, collect output into an array of objects.\nconst collect = require(\u0026#39;collect-stream\u0026#39;); const split = require(\u0026#39;split2\u0026#39;); const sp = process.stdin.pipe(split(JSON.parse)) collect(sp, function(err, rows){ if(err) console.error(err); else console.log(rows) }) from2 # Create a readable stream with a pull function. Reminds me a bit of a generator. (Enumeration)\nconst from = require(\u0026#39;from2\u0026#39;); const messages = [\u0026#39;hello\u0026#39;, \u0026#39;world\\n\u0026#39;, null]; from(function(size, next) { next(null, messages.shift()) }).pipe(process.stdout); to2 # Create a writable stream with a write and flush function.\nconst to = require(\u0026#39;to2\u0026#39;); const split = require(\u0026#39;split2\u0026#39;); process.stdin .pipe(split()) .pipe(to(function(buf, next) { console.log(buf.length) next(); })) Duplexify # A logger example\nconst duplexify = require(\u0026#39;duplexify\u0026#39;); const mkdirp = require(\u0026#39;mkdirp\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;); module.exports = function (name) { const d = duplexify(); mkdirp(\u0026#39;logs\u0026#39;, function(err) { const w = fs.createWriteStream(\u0026#39;logs/\u0026#39; + name + \u0026#39;.log\u0026#39;); d.setWriteable(w); }) return d; } Usage example\ncont log = require(\u0026#39;./logger.js\u0026#39;); const stream = log(\u0026#39;myname\u0026#39;); stream.write(Date.now() + \u0026#39;\\n\u0026#39;); stream.end(); Errors # Streams are also even emitters. So errors can be caught with error listeners.\nPump # Pump can pipe streams on each other, but gently handles errors.\nconst pump = require(\u0026#39;pump\u0026#39;); pump(stream1, stream2, stream3, function onError() {}); Pumpify # Unlike pump, you get back a stream you can write to and from.\nEnd-of-stream # Reliably detect when a stream is finished. This package is aware of all the obscure ways streams can end.\nconst onend = require(\u0026#39;end-of-stream\u0026#39;); const net = require(\u0026#39;net\u0026#39;); const server = net.createServer(function(stream) { const iv = setInterval(() =\u0026gt; { stream.write(Date.now() + \u0026#39;\\n\u0026#39;); }, 1000); onend(stream, function onEndedOrErrorsOut(){ clearInterval(iv); }) }) server.listen(5000); Remote Procedure Call and Multiplex # RPC-Stream # Call methods defined by a remote endpoint.\nMultiplex # Pack multiple streams into a single stream.\n"},{"id":14,"href":"/osint/","title":"Index","section":"Knowledgebase","content":" OSINT: Open Source Intelligence # Certifications # https://www.giac.org/certifications/open-source-intelligence-gosi/ Methodology # Intelligence Cycle # Planning and Requirements Collection Processing and Evaluation Analysis and Production Dissementation and Consumption Repeat Subject Intelligence # Intelligence about a person and direct metadata (address, name, email, accounts, \u0026hellip;)\nTools # dehashed.com - data breaches and passwords Social Media Intelligence # Social Media of a Subject/business\nNote that especially younger generations might have multiple accounts for various audiences (friends, themselves, a business, \u0026hellip;.)\nMIS/DIS/MAL-information\nMisinfoformation: Misleading or incorrect information that is not knowlingly deceptive. Example: Grandma posts article about vitamines curing cancer. Misinfoformation: Misleading or incorrect information that is knowlingly deceptive/deliberate. Usually entirely fabricated. Example: Mascot from one team posts false information about competing mascot, about being arrested for assault. Malinformation: Based in reality but is purposfully harmfull. It\u0026rsquo;s is based on reality but shared out of context or intent to cause harm. Example: Political party post fake story of immigrant assaulting a native woman to ignite hated. Tools # Telegram Stats Reddit Post Analyzer 1 Reddit Post Analyzer 2 Pro Twitter (Former Tweet Deck) Centre For Information REeslience Snopes: Debunk site Snopes Fact Checks Fact Check.org Verification Handbook: Guide to verify digital content Spot Bot Like Behaviour on Twitter/x: Bot Sentienel Graph Tools For Analysis Neo4j Gephi Foto Forensics Tool 1 Tool 2 Business and Organisational intelligence # Usual data points Corporate/business structure disclosures Parent Subsidary Holding companies Contract disclosures Government Contracts \u0026gt; Usually public by law \u0026gt; You can check if a given organizatio had government contracts Sounds boring, but very juicy details can be found, especially in appendix Technologies, subcontractors used, blueprints, contacts, building specs,\u0026hellip; Financial Records / annual reports Affiliation and relationship disclosures Procurement / supply chain disclosures Innovative / proprietary technology disclosures Business discretions and lawsuits santions / illegal activity Public disclosures Published material disclosures Public companies must submit reports, so that helps with public companies Social media and other public info allows to pivot to subject intelligence Recognizing Oranizational Crimes Guide 1 guide 2 Be informed about sanctions to know if someone is doing shady stuff UN Sanctions ParisMou Sanctions Financial Action Task Force (FATF) - global money laundering and terrorist financing watchdog Non profit are not allowed various things, non profits can be often used to attract funds for good things but in practice do other things that benefit private persons for example. Non profits usually have less oversight, that’s why they’re so tempting for fraud. In every country normally non profits have to do some declarations or statements that should be publicly available . Or they might self publish reports to attract trust. Organizations Domain / Site / IP Look at robots.txt of any site for potential attempted hidden stuff Search for a domain, you might find what other sites refer to the site, that can uncover stuff. The content of a site can indicate if the site is fraudulent, just a quick shell, images and text can be analyzed or reverse searched to see if it’s stock or fake, fotoforensics etc… If content is legit, it can tell alot about partners, customers, org, employees, structure, contacts, social media, … Website metadata Find hidden but public data by google dorking : site: tandbergeiendom.no ext:docx | ext:xlsx | ... Use FOCA for screening a site IPs can show connections or shared infrastructure between seemingly unrelated organizations . Remember, a single hosting can run for various companies sites that are unrelated to, rhey just use the same hosting (e.g wordpress). Tools # Facebook Ads - See all current or past ads and who paid them Open Corporates DNB paid alternative to open corporates, but often. Has more data. EDGAR =\u0026gt;. All the public SEC data in US Project On Government Oversight USASpending.gov - US Federal Produrement data Open Tender EU LittleSis - Find connections/network between entities and people Whoxy.com - WHOIS lookup Nslookup.io - IP Lookup The ASN (autonomous system number) is something you can pivot on FOCA fingerprint site DNSLytics Transport Intelligence # \u0026hellip; todo\nTools # Transportation intelligence # \u0026hellip; todo\nWhat is SAR Difference GPS and GNSS AIS-VTS Jamming and spoofing GNSS JAmming GPS erminology: Parts of ships and equipment aboard ships Gloassary of Port and Shipping Terms Inustrial Control System THE GUIDELINES ON CYBER SECURITY ONBOARD SHIPS Military Aircraft Insignia Visual Aircraft Recognition Drone Survival Guide Off the Radar: Private Planes Hidden From Public View What to Know About Air Cargo Handling Airports \u0026amp; Operational Technology: 4 Attack Scenarios How to decode your VIN Tools # Shipspotting Windy Landsat earthobservatory Sentinel Hub EO Browser Soar Satelites Google Earth Marine Traffic Vesselfinder National Vulnerability Database ArcGis AnyTrip - Live rail map Australia OpenRailwayMap Mobility Portal Travel Time Map Airline Call Signs Plane Spotters Flight Radar 24 adsbexchange - World\u0026rsquo;s largest source of unfiltered flight data Flight Aware OpenStreetMap AirPortia Federal Aviation Administration (FAA) FNS NOTAM Search (FAA) Temporary Flight Restrictions List (FAA) Live Air Traffic Fire Information For Resource Management System Airport SCADA Solutions Model Recognition User submitted license plate database License Plate Lookup Licensen Plates Of The World LocaToWeb is a reliable real-time GPS tracker app for Iphone and Android that shares your position to web in real time. Trucking Database] Critical Infrastructure and Industrial intelligence # \u0026hellip; todo\nTools # Financial intelligence # \u0026hellip; todo\nTools # Cryptocurrency intelligence # \u0026hellip; todo\nTools # Non-Fungible Tokens intelligence # \u0026hellip; todo\nTools # Tools - General # Search # Google Bing Yandex Baidu Archives # WayBackMachine Archive.ph Auto Archiver - Archive social media and other online content Workflow # Browser Extension - Instant Data Scraper Alternatives Others # Bellingcat Toolkit GeoSpy https://fakepersongenerator.com Shodan.io Cyberchef (github) Thispersondoesnotexist.com Similarweb.com/top-websites Google.com/advanced Strava.com raebaker.net/resources PIPL https://whatsmyname.app/ @nixintel Sherlock Github https://epieos.com/ weekdays.works Whoxy.com Viewdns.info Emailrep.io (the lower the reputation, the less likely it’s legitimate) Haveibeenpwned.com IntelligenceX (search breaches) Spiderfoot Lexisnexis.com Https://legal.thomsonreuters.com/en/products/clear-investigation-software Sociallinks.io TheOrg - Find the org charts of companies Belliongcat Filename Finder - Show original file names on google maps Norway Specific # PureHelp Finn Skattesjekk.no - Check tax of people anonymskatt - Check tax of people skatteetaten - Check tax of people - not anonymous Brønnøysundregistrene - Norway’s central register authority. Contains multiple registers such as the Register of Business Enterprises, the Register of Company Accounts, and the Register of Bankruptcy. Proff - A commercial website using data from the Brønnøysund Register Centre and other sources to present company overviews. Maybe you can find here if someone owns or runs a business Einnsyn - A centralized service for searching through Norwegian government agencies’ public records (post journals) Kvartverket - National authority responsible for mapping, property registration, and geographic data. seeiendom - public-facing portal that combines property information from the Norwegian Mapping Authority, the Cadastre, and the Land Register Boretslag Info You can see when debts where made and the price something was purchased, refinancing is also visible Bolig.ai https://www.eiendomspriser.no/ Budstikka - Property Transers Eiendom norge Domstol - Norwegian court rulings can be made partially available to the public, though privacy restrictions apply and many legal documents are anonymized. 1881.no - Online directories for phone numbers, addresses, and sometimes additional public info (e.g., businesses and individuals). arkivverket - Repository of historical and archival materials, both for governmental and non-governmental entities. NB.no - National repository of publications in various media, some digitized and freely available. Vegvesen - Contains Vehicle Information You can check all the cars that someone has owned (require SSN) You can check who (only name) ons a car with a given license plate https://www.digitalarkivet.no/ https://www.doffin.no/ - Database for public procurement Public Tenders Database Resources # Deep Dive: Exploring the Real-world Value of Open Sourc Open Source Intelligence Techniques: Resources for Searching and Analyzing Online Information (9th edition) https://www.bellingcat.com https://benjaminstrick.com/ Renee Diresta Blog - If you give a mouse a cookie "},{"id":15,"href":"/productivity/","title":"Index","section":"Knowledgebase","content":" Productivity # Dealing with the large stream of information # Try to find a system that works for you, cause you can\u0026rsquo;t change the fact that there WILL be a large stream of information coming your way.\nYou can consider using David Allen\u0026rsquo;s \u0026ldquo;Getting things Done\u0026rdquo; approach:\nDrop means read, understand, and then archive. It’s what you use for anything that doesn’t require any action on your part. Always archive, never delete. Delegate is for things that do require action, but not from you. Make sure that it gets to the right person and is understood by them, and make a note for follow-up. It can be someone you report to, reports to you or even outside that line. Within your own team, you only ever delegate tasks, not responsibility. Find the right person that can get the task done. Preemptively send them all the information that you think they might need (and that you have access to), rather than relying on them to ask. Ask them to acknowledge that they have received what they need. Make a note to follow up to see if they need anything else, and follow through by seeing the task to completion. Defer means it needs doing, and it’s you who needs to do it, but it doesn’t need doing immediately. Enter it into your task list, and clear it from your inbox. Add the task immediately to some sort of queue (for email, this can be a folder named “Needs Reply”), Make sure to go through that queue at a later time to prioritize, Absolutely ensure that you make time to go back and actually do your prioritized tasks, at a time you consider convenient. Do are the (typically very few) things that remain that need to be done by you, and immediately. Tell people that you’re doing them, because you’ll want to be uninterrupted. Update your chat status, put some blocked time in your calendar. Make sure you’ll be uninterrupted. For email, turn off all your notifications. Plow through all the undropped, undelegated, undeferred items in your inbox until it’s empty. "},{"id":16,"href":"/project-management/","title":"Index","section":"Knowledgebase","content":" Project Management # Utilization of many different skills, resources, tools, techniques, and accumulated wisdom in order to effectively coordinate project activities and achieve goals.\nKey Responsibilities # Manage Project Requirements Maintain control over scope and objectives Maintain activites align with goals Administrate change control Capture evolving needs by the scope and objectives. Balance stakeholder needs in implementation the most appropiate solution Address stakeholder needs Maintain communication Ensure stakeholders remain up to date with appropiate communications. Ensure project team informed of all relevant changes and information. Balance Resource Constraints Limited resources are present in every project environment. Must work to balance contraints and priorities Project Constraints Scope Schedule Risk Budget Quality Resources You must balance between project constraint types consciously to achieve your project requirements. You must decide which project constraints take higher priority based on project requirements. Remain mindful of the outcome, goal or reason that a project/initiative exists, not just defined deliverables. Foundations # Key thought process of a project, to make sure it has actually value the investment? It can be less strict, but use these foundations to evaluate of the project has value and if all stakeholders agree on the scope or objectives.\nNeeds Assesment Maybe conducted by project manager, busienss analyst or external. Determine underlying needs that indicate an oppertunity for a project that can create value or solve problems. By addressing needs, value is created. Business Case Lists objectives and justifications for the project. Should indicate economiv feasibility and expected net benefit of project. Timeline of benefit realization vs incurrance should be described. Benefits Management Plan How and when project benefits will be delivered. Define target benefits and timeframes, list risk factors and assumptions/constraints. Metrics that can be used to verify delivery of benefits. Project Charter Founding project document created or approved by project sponsor. Defines core project objectives, provides for funding, names key stand and project manager. Project Management Plan Create by PM and Team Describes how ojectives will be completed and how work will be managed. Key Project Roles # \u0026hellip; Next\nRequirements for a Project # A business case is made by proving the results of a project will fullfil one or more needs. The value creation of a project is dependent on how well it meets needs relative to the costs incurred.\nThe value is not perse financial, can be also other gains, benefits or value\nTypes of project value # Financial Strategic Social good Increase Quality / Resilience Organizational empowerment Customer satisfaction Technological Innovation Intellectual Property "},{"id":17,"href":"/psychology/","title":"Index","section":"Knowledgebase","content":" Psychology # Evolutionary Psychology # \u0026hellip;todo\nResources # Why Facts Don’t Change Our Minds "},{"id":18,"href":"/readme/","title":"Readme","section":"Knowledgebase","content":" About # My personal knowledge base where I keep summaries and note of useful professional knowledge. All the content is publicly available on GitHub and my public site\nConsider this entirely \u0026ldquo;Work In Progress\u0026rdquo;, there will be many incomplete parts, nor will it ever be complete. These notes help me structured my thoughts, reference back to them at a later point, or share them with others informally.\nIndex # General # AI Business Career Change Management Coaching Communication Facilitation Productivity Project Management Psychology Reasoning Statistics Wisdom Software Engineering # Data structures and Algorithms\nCybersecurity\nNetworking\nIT Strategy\n\u0026gt; Platform Strategy Software Architecture\nSoftware Design\nSoftware Development Process\nSoftware Testing\nNiche Topics # OSINT: Open Source Intelligence Study Notes: Azure (NodeJS) Network and Streams USB Spec and How it works Study Notes: Linux LPIC 1 Notes To Myself # Resarch Hugo Research GatsbeJS How can the GraphQL layer help for living documentation\u0026gt;? General Links # https://intltechventures.blogspot.com/2023/10/2023-10-11-wednesday-todays-mediation.html https://hbr.org/2021/04/have-we-taken-agile-too-far https://localmess.github.io/ https://cyata.ai/blog/cracking-the-vault-how-we-found-zero-day-flaws-in-authentication-identity-and-authorization-in-hashicorp-vault/ "},{"id":19,"href":"/reasoning/","title":"Index","section":"Knowledgebase","content":" Thinking # Chapter 1: An Overview # Thinking is any mental activity that helps formulate or solve a problem, make a decision, or fulfill a desire to understand. It is searching for answers, and reaching for meaning. To be a succesful problem solver, you will need both factual knowledge and proficiency in thinking. Good thinking: Good thinking is a matter of habbit, yes some will have a more talent for it, but its a habbit that can be trained and improved. Don\u0026rsquo;t need to be in the NBA to enjoy basketball. IQ seems not connected to this. They have learned strategies for thinking. They have learned strategies to deal with frustration (conusion, mental blockers, \u0026hellip;). They have learned strategies to regain focus/concentration. Comparison: Good Problem Solvers: Read a problem and decide how to begin attacking it. Bring their knowledge to bear on a problem. Go about solving the problem systematically. (e.g. try simplifyng, breaking into smaller problems, \u0026hellip;) Tend to trust their reasoning and have confidence in themselves. Maintain a critical attitude throughout the problem-solving process. Poor Problem Solvers: Cannot settle on a way to begin. Convince themselves they lack sufficient knowledge. Plunge in, from one part of the problem to the other, trying to justify first impressons Tend to distrust their reasoning and lack confidence in themselves. Lack of a critical attitude and take too much for granted. Brain At work: Your brain has 2 distinct phases that complement each other during problem solving and decision making. The Production Phase: Most closley related to creativity, it produces solutions, ideas, responses. There are techniques to be learned to be better at this. The Judgement Phase: Most closely related to critical thinking, it examines, judgjes, adds refinements, evaluates. Meaningful Discussion: Many hosts demand that their guests answer complex questions with simple yes or no answers. If the guest responds that way, they are attacked for oversimplifying. If, instead, they try to offer a balanced answer, the host shouts \u0026ldquo;You\u0026rsquo;re not answering the question\u0026rdquo;.\nGuidelines: Wehever possible, prepare in advance. Set reasonable expectations. (people will probably not change their conviction on the spot) Leave agotism and personal agendas at the door. Contribute but don\u0026rsquo;t dominate Avoid distracting speech mannerisms Listen actively Judge ideas responsibly (try to not have your general impressions or feelings get in the way to judge something on its merrits) Resist the urge to shout or interrupt Preliminary thinking strategies When you must analyze a single statement: Read it again Ask yourself \u0026ldquo;Does this make sense?\u0026rdquo; If you have a firm YES/NO, decided what makes to respond that way. That argument is probably what to explain to others. When you get stuck, words fail, dead end road, so difficult challenges: Use a diagram Example: \u0026ldquo;All dogs are animals. Fido is a dog, therefore Fido is an animal\u0026rdquo; you could diagram as this: Animal \u0026lt;- All dogs \u0026lt;- Fido When the statement presents as fact something that is not factual, identify the error and explain how it invalidates the statement. When the statement confuses two terms or ideas, identify the confusion and show its effect on the statement as a whole. When the statement presents a conclusion as the only possible conclusion and other conclusions are also possible, present the other conclusions and demonstrate that they, too, are reasonable (perhaps more reasonable). When the statemnt, or some part of it, is open to interpretation, use the if-then approach to analysis. Example: IF X is true THEN conclusion A, IF Y is false THEN conclusion B Also valid if you are unsure about facts When there is a dialog First read it to understand the discussion in its entirety Then read each person\u0026rsquo;s comments individually, note the progression of their thoughts and the degree of logical consistency. Finally read for implications and assimptions (these are ideas that are not stated directly but are nevertheless identifiable by what is stated directly) Reasoning Types # Reasoning is a cognitive process that involves drawing conclusions, making judgments, or forming inferences based on facts or premises. This process has been explored from various perspectives:\nSymbolic reasoning: involves the manipulation of symbols that represent ideas or objects and it is often used in mathematics and logic to represent numerical values or logical propositions. Causal reasoning: focuses on discerning the relationship between a cause and its effect, aiming to understand how certain events can impact other. Inductive reasoning: making broad generalizations from specific observations Deductive reasoning: applying general principles to specific cases Abductive reasoning: forming the best hypothesis based on incomplete information Reasoning (Book) # Nature of reasoning # Reasoning is a skill in using thought and language, and it is profficiency in this skill, not the mere possesion of language, which distinguishes the human species from the others on this planet.\nReasoning has function to help us find answers to our problems.\nReasoning has funcfion to express reasons in publicly accessible language.\nPublicly accessible language means that it must be easily accessible or understandble to others.\nThe emphasis on communication, on the crucial importance of the social activity of reasoning, means that we can scarecely afford any jargon at all.\nDifferent texts might use different terminology. Reading without understand = Basic Reasoning\nRational = Reasonable\nPractice is more valuable than theory on Reasoning, it\u0026rsquo;s like language, there is no adequate grammar, it changes, you have to use it, just like learning a language.\nPurpose of reasoning # Reasoning can be used in the service of criticism Reasoning can be used in the service of persuasion or communication. Reasoning is the means whereby we reach new conclusions, gain new knowledge, uncover new and important facts. Creativity \u0026amp; Reasoning # Creativity is a major component in reasoning. The process of trying to think of alternative explanations of a set of facts, is an entirely creative process.\nArgument Analysis # 3.2 Inconcistency Types Logical Inconsistency: Can be detected by anyone who speakers the language without other special knowledge. (aka Contradiction) Factual Inconsistency: A logical inconsistency between what is said (Antwerp is near Oslo) and an unstated fact (Antwerp is in Belgium, but that\u0026rsquo;s a fact or special knowledge that you need to spot the inconsistency). Improbable/Implausible/Quasi-Inconsistent: Something described of having 2 properties which are almost certainly incompatible (that dress is overall green and overall red, but certain materials can be that based on light conditions ). Contradiction == logical inconsistency Consistency is a requirement of communication. Avoid inconsistency/contradiction is crucial. The main point of argument presentation is to show that some kind of inconcistency or implausability is involved in accepting the premises of the argument and rejecting the conclusion. Arguments are meant to be persuasive; and they succeed in being persuasive if they begin with assertions that the listener or reader is known to accept, and if they continue by showing that acceptance of those asserts (which are called the premises of the argument) requires the acceptance of the conclusion. The power of an argument depends upon two things: It should start off with premises that are known to be true or can be shown to be true. It should proceed to demonstrate or exhibit the way which these premises \u0026ldquo;force\u0026rdquo; one to accept the conclusion(s). The force of whishing to avoid contradiction/inconsistency if a weaker kind. You start with a premis (things the other accept) and then steps (aka the inference) that built towards a conclusion. If someone disagrees but agrees with the premsie, they must rebunte one of the steps. You are 18 years old (premise), men below age 25 don\u0026rsquo;t have fully matured brains (step/inference 1) according to sience, so you are not fully mature (Conclusion), Argument types Deductive argument - Logical deduction (e.g. arithmics showing how much something costs, including hidden costs) - Easy attacked with facts or newer facts Inductive argument - Statistical/probable (e.g. its very likely interest rate will increase next month, because \u0026hellip;) - Harder to attack, cause it\u0026rsquo;s implied it\u0026rsquo;s not factual, but likely. Inconsistency is great attack/weapon if poeople have no interest to communicate. Reasoning can be used in the service of criticism or in the service of persuasion or communication. Logic or reasoning is the means whereby we reach new conclusions, gain new knowledge, uncover new and important facts. Reasoning is a constructive and creative activity that leads us to knowledge. Creativity is important to reasoning, the process of trying to think of alternative explanations of a set of facts, is an entirely creative process. Good thinking, reasoning and creativity go hand in hand An argument is logically sound when the reasoning is sound, that the inferences/steps from premise to conclusion are sound, without saying anything about whether the premises are themselves sound (you might not know the facts about the premises) An argument is factually sound means that the premises are in fact true. An argument can be criticized either by focusing on the truth of the premises, or the goodness of the inference/step. These 2 ways are directly mapped to the factual sound argument and logically sound argument The Logic of argument : all the steps/inferences from premise to conclusion A conclusion is an inference, actually every inference/step is a kind of mini/inbetween conclusion An inference and implication are different. An implication is something that is not directly inferenced by the speaker of the argument, an inference is a clear step that the speaker takes. “The eggs are now rotten, therefore it’s not safe to eat. The inference is that you can’t eat the eggs because they’re rotten, an implication would be, that the spoiled eggs probably now smell like rotten eggs. The 7 steps in argument analysis overview # The steps are not highly technical in itself, the difficult thing is to follow them carefully and skillfully.\nClarification of meaning (of the argument and of its components) Identification of conclusions (stated and unstated) Portrayal of structure Formulation of (unstated) assumptions (the “missing premises “) Criticism of the premises (given and missing) and the inferences Introduction of other relevant arguments Overall evaluation of this argument in the light of 1 through 6 Step 1. Clarification of meaning (of the argument and of its components) # Clarity of: Terms, Phrases, Sentences, Suggestions or Implications and Arguments. Method # A. Read most or all of the argument of passage under consideration before trying any clarification.\nB. Replace unknown terms by reference to a dictionary.\nC. Rewrite any unclear parts, using clearer language.\nD. In particular, identify vague or ambiguous terms that you suspect the argument is \u0026rsquo;exploiting'.\nE.g By shifting from one meaning to another. Translate the clause or sentence containing each occurrence of these terms into other language that conveys the correct meaning of the term in each context. That will show up any shifts in meaning E. Write out any important unstated but intended implications or suggestions of the premises, the conclusions, and the argument as a whole.\nWhat\u0026rsquo;s it trying to get across that isn\u0026rsquo;t actually spelled out? F. Ask yourself if you really understand how everything fits together. In other words, have you a \u0026ldquo;feeling\u0026rdquo; for the argument or passage as a whole (even if you don\u0026rsquo;t accept it)?\nDon\u0026rsquo;t let hostility you may have for the position expressed mislead you into misrepresenting the argument - say, by making it more stupid than it already is (you think). Look over results of A through E and criticized the passage for unclarity where appropriate. Most of step 1 is laying ground for later analysis. But this part, G is a component of your final criticism. Remember # The \u0026ldquo;meaning\u0026rdquo; of an argument (or word, or other expression) is not what the arguer intended but what he or she said, taken as a native speaker of the language would hear it. Still, You want tom kae the best guess at the arguer\u0026rsquo;s intended meaning, and we can take account of context. Ine one context \u0026ldquo;Dogs Bite\u0026rdquo; may mean \u0026ldquo;All dogs bite\u0026rdquo;; ion another, \u0026ldquo;most do\u0026rdquo;\u0026rsquo; and in another \u0026ldquo;Dogs, sometimes bite\u0026rdquo;. That is, the meaning of words or phrases isn\u0026rsquo;t to be found in those worlds all by themselves. Look at the context; if the speaker is present, ask for clarification. If not, treat the words as having their usual meaning. Step 2. Identification of conclusions (stated and unstated) # Method # A. Some of the unstated conclusions turn up in step 1(E) while you\u0026rsquo;re trying to get the meaning straight. Set them out now; write them in below the passage of text, or fit them in (perhaps in the margin) where they come in. Are there any more, perhaps unintended but unavoidable ones? Get them all states clearly and fairly. Which are the most important ones? Is there one main conclusion? (there usually is.).\nB. To located the stated conclusions, look for indicate words like therefore, because, so and thus and for replacement cues such as the location d the end of a paragraph.\nThese cues are bu no means always reliable; you also have to depend on your sense of the meaning of the passage as a whole. C. Notice that here may be several conclusions in the argument, each building on the previous ones. And a passage may also contain several entirely separate arguments.\nD. Within any one argument, try to decide if that argument has a main conclusion (or conclusions) and if the others can be ranked as to their importance.\nWe can call the second group \u0026ldquo;secondary\u0026rdquo; conclusions, some of which may still be quite important, others more or less incidental. Step 3. Portrayal of structure # Set out the relationships between conclusions and premises (in the parts of the passage that are arguments). You\u0026rsquo;ve already identified the conclusions. Now you just need to ask yourself what assertions are being put forward to support each of these conclusions. These are the premises. Typically, there will be other material in the passage that is neither a premise or a conclusion. It may be instructions, rhetoric, repetition, flourish, or other statements. The following procedure is unnecessary for simple arguments, and it should be applied to very long ones a page or paragraph at a time.\nMethod # A. Number each separate assertion; note that one sentence may contain several assertions.\nPut square brackets at the beginning and end of each asserts, and number it it in the margin or above the line of type. B. Do not give a number to repetitions of the same assertion.\nC. Do not number irrelevant statements (\u0026ldquo;asides\u0026rdquo;). Remember that your judgments or irrelevance or repetitiousness. Remember that your judgement of irrelevance or repetitiousness are crucial to your evaluation of the argument, and you must be ready to defend them.\nD. Do give a number to the implicit conclusions you first located in 1E and 2A.\nE. Set out the relationships between the relevant assertions in a tree diagram like the one shown here. It is read downward on the page.\nIf 1 and 2 are claims put forward to support 3 and are not themselves supported by any other assertion, and if 3 is supposed to support 4, but not vice-versa, the diagram looks like the illustration. If 4 might be an unstated conclusion, you might put it in parentheses, as shown.\nF. For a \u0026ldquo;balance of considerations\u0026rdquo; argument, where we say that 1, 2, and 3 suggest the conclusion 5, \u0026ldquo;Despite\u0026rdquo; 4 (which points the other way), use symbolism as shown in this diagram.\nG. Sometimes, you can set the structure out on a single line, e.g., ( 1 + 2 + 3 + 4) -\u0026gt; 5 or 1 -\u0026gt; 2 -\u0026gt; ( 3 + 4 ). The arrow then stands for \u0026ldquo;implies\u0026rdquo;. Sometimes the suggestion is made that, for example, ( 1 + 2 ) imply ( 3 + 4 ) and are implied by them then use a double-ended arrow, thus: ( 1 + 2 ) \u0026lt;-\u0026gt; ( 3 + 4 ).\nH. Terminology: IF statement 1 implies statement 2, we can also say 2 \u0026ldquo;follows from\u0026rdquo; 1, or \u0026ldquo;is a consequence\u0026rdquo; of 1, or that we can infer 2 from 1. It is incorrect to say 1 infers 2: statements imply but can\u0026rsquo;t infer; people can do both (but not at the same time).\nI. While doing this, begin to look for places where there are significant, unstated assumptions (\u0026ldquo;missing premises\u0026rdquo;). You can locate them by adding circles to the tree diagram with letters in them at the appropriate places, thus:\n(A is an assumption that is needed to support the interference from 1 and 2 to 3) To formulate them exactly, see the next section.\nStep 4. Formulation of (unstated) assumptions (the “missing premises “) # The most difficult part of reconstructing an argument is fair and clear formulation of the \u0026ldquo;missing premises\u0026rdquo;, the unstated assumptions. You must distinguish between:\nA. The Arguer\u0026rsquo;s assumptions, what he or she consciously assumed or would accept as an assumption if asked.\nB. The minimal assumptions of the argument whatever is, logically speaking, necessary to make it possible to get from the premises to the conclusion of the arguer.\nC. The optimal assumptions, usually stronger claims than B which are logically adequate and independently well-supported.\nStep 5. Criticism of the premises (given and missing) and the inferences # Criticism of expression is already covered in 1(g).\nCriticizing an inference from statement 1 to statement 2 means criticizing the claim that 1 supports 2. You do not need to know where 1 is true or not in order to consider whether it supports 2. You just have to ask, if 1 were true, wouldn\u0026rsquo;t 2 then have to be true, or at least very likely be true?\n(Understanding this point is also the key to testing a hypothesis, for when we say, \u0026ldquo;If Jones did kill Mrs. Robinson, he would have to run a mile in 5 minutes to be in the restaurant by 9:10 PM\u0026rdquo; we\u0026rsquo;re not saying he did or that he didn\u0026rsquo;t, but we are suggesting that it\u0026rsquo;s reasonable to infer from the claim that he did it to a certain conclusion. By checking on whether he could run this fast, we are testing the hypothesis that Jones was the murderer)\nCriticizing a premise requires that, if the argument is going to be any good as a way of marshaling support, the forces it calls up had better be strong, i.e., the premises must be reliable. When the premises are technical claims, you aren\u0026rsquo;t expected to comment on them in the course of logical analysis. When they are definitions or analyses subject to logical criticism, or matters of common knowledge, you are expected to asses them.\nGood criticism of an argument requires that you look at both the reliability of the interference and the reliability if the premises. You might think that there\u0026rsquo;s no point in looking at the interference if the premises are false. But your criticism of the premises may be either in error or fairly easy met by minor modifications; you must guard yourself against this by covering both types of criticism. Good criticism also involves selective attack; first attack the main conclusions (via the premises and interferences that bear on them), and spend less time on the others. And attack with your strongest weapons first do not start by making picky points, following the order of the statements in the original. Start in on the key weaknesses: start with your strongest criticism. Strong criticisms are those that could not be met except by extreme modification or complete capitulation.\nCriticism Strategy involves the key move of \u0026ldquo;counter exampling\u0026rdquo;. It applies to many types of premise and all types of inference, and it is an exercise in imagination. Here\u0026rsquo;s an outline of the procedure that you can refer back to later. It may hard to follow in this brief summary, but we\u0026rsquo;ll explain it with examples in the next section.\nA. Counter example a generalization - \u0026ldquo;All A\u0026rsquo;s are B\u0026rsquo;s\u0026rdquo;\u0026quot; or \u0026ldquo;Any A is B\u0026rdquo; - you think of of indubitable cases of A that are definitely not B. (It is irrelevant to think of B\u0026rsquo;s tha aren\u0026rsquo;t A\u0026rsquo;s, since the claim wasn\u0026rsquo;t that all B\u0026rsquo;s are A\u0026rsquo;s). B. Counter example a definition - \u0026ldquo;A means the same as B\u0026rdquo; - treat it as a two-way generalization (i.e. \u0026ldquo;Any A must be by definition be a B\u0026rdquo; and \u0026ldquo;Any B must by definition be an A\u0026rdquo;) and look for counter examples in the reals of possibility as well as actually, since a definitional truth must hold whenever the language can be clearly applied, not only where it has been applied. C. Counter example an inference - Treat it like a one-way generalization. (It will be a definitional generalization in the case of strict deductions, as in most mathematical inferences; a factual generalization in the case of most scientific inferences.) That is, if the statement A is supposed to imply statements B, try to think of cases where A would be true but B would be either definitely false or unlikely. D. Counter example an interpretation or analysis - treat it as an inference from that which which is interpreted to the interpretation itself, and handle it as in c. (It may be intended as an equivalence, that is, a two-way inference) Remember! # If you have extensively reconstructed an argument by filling in so many missing premises and conclusions, you will have done so partly by asking what it would take to make a good argument. Hence you often won\u0026rsquo;t find much to criticize about in the inferences in the reconstructed argument - your criticism will fall instead on the extra bolstering premises you had to add.\nStep 6. Introduction of other relevant arguments # If you stopped after Step 5, you\u0026rsquo;d have a thorough critique and sometimes that\u0026rsquo;s all that\u0026rsquo;s called for, but you wouldn\u0026rsquo;t know what to think yourself. For to discover that a particular argument has some defects is not to discover that it shouldn\u0026rsquo;t be given some weight, perhaps a good deal. Perhaps, enough to act on. At this point, then, you must step backward and try to get a perspective on the argument. First, ask yourself wether there are arguments on the same issue which point in another direction, perhaps to the opposite conclusion or to a somewhat different conclusion. (In the case of argument from analogy, you may find that the very same analogy can be viewed somewhat differently and taken to support the opposite conclusion.) next, look for the other arguments that support the same conclusion.\nStep 7. Overall evaluation of this argument in the light of 1 through 6 # Go back to your criticisms. How devastating are they? Could they be met by modest modifications or the original material? Even when devastating, do they cover all the original lines or argument? Look at the results of Step 6. They not only should help you decide what you think but they also may help you to see what the original argument was after. Have you overcritizied it? Now, make your final judgement on the argument. Grade it, in several dimensions if you like, but then make yourself give an overall grade. It\u0026rsquo;s a cop-out not to. You must decide where it does have force, and how much for you.\nResources # Art Of Thinking by Vincent Ruggiero. Reasoning by Michael Scriven. "},{"id":20,"href":"/software-architecture/","title":"Index","section":"Knowledgebase","content":" The (Software) Architect Handbook # Written and compiled by Ian Segers as personal guide for his job as Solution Architect. In case you are reading this directly on GitHub, you can read this Markdown rendered on the GitHub Page. This is a static website which gets easily cached. To make sure to have the latests contents, do a hard refresh (CTRL + SHIFT + R for chrome/brave/edge).\nWhat Is Software Architecture? # Many definitions exists out there, but I like to inspire my definition on Systems, from the field of Systems Thinking.\nSoftware architecture is everything that matters about the architecture and design of information systems. whatever that might be.\nBefore we further explain what that exactly might entail, it is important to first understand what are systems.\nSystems # A \u0026ldquo;system\u0026rdquo; in systems thinking is a set of interconnected elements, which can be subsystems in their own right, organized within defined boundaries. These elements function cohesively to achieve a common purpose or produce specific outcomes, influenced by the system\u0026rsquo;s structure and internal interactions.\nHere can find a detailed breakdown of the definition.\nA Systems Analogy # A system can be as simple as a bathtub. The bathtub holds water, there is a faucet that allows to regulate inflow of water, and there is a drainage pipe that allows for outflow of water. There are interconnected elements, and they produce a specific outcome (e.g. fill up the bath tub) based on the systems\u0026rsquo;s structure and internal interactions (open the faucet, close the drainage).\nAn example op an adjacent system would be the sewage system. The bathtub system and sewage system are inter-connected. The defined boundary of the bathtub system is the faucet, tub, and drainage pipe. The defined boundary of the sewage starts from the drainage pipe and ends at the sewage filtering station.\nThe bathtub system and sewage system are both part of a larger overarching system called the water supply and sanitation system. Making the bathtub system and the sewage systems subsystems of the water supply and sanitation system.\nYet again, the bathtub system itself can have multiple subsystems. The faucet for example can be examined more closely, and be considered as a (sub)system in its own right again, detailing the internal workings of the faucet.\nNotice that a system is not just about how it is structured. There is also a time aspect to this, how does the system behave over time? How does that behavior change as we interact with the system? (e.g. close the faucet, open the drainage, \u0026hellip;) This is what we mean with \u0026ldquo;these elements \u0026hellip; produce specific outcomes\u0026rdquo;.\nA Software System # With Information Systems we can look at it in the exact same way. An organization can be seen as one large IT system - with each component in it - being a system in its own right (e.g. a webserver), producing specific outcomes and behavior. This comes with a defined boundary (e.g. all the on-prem systems of the organization). All these systems are interconnected, facilitating communication between and within (sub)systems. Data being the content that is communicated over these interconnections or lives within components.\nThis means that one can \u0026ldquo;zoom in\u0026rdquo; on any component of an information system and look at it\u0026rsquo;s internals, exposing potential another subsystem. However, for ease of reasoning about a system diagram, we don\u0026rsquo;t expose the details of any subsystems, based on what the diagram tries to communicate.\nInformation systems also have a time aspect, it\u0026rsquo;s not a static snapshot, the system over time produces certain outcomes.\nBoundaries and Domains # A system has defined boundaries, and that\u0026rsquo;s what we do also with information systems. An information system has defined boundaries, detailed what components are part of it, some might use \u0026ldquo;scope\u0026rdquo;. These boundaries or scope usually encompass a \u0026ldquo;domain\u0026rdquo;. A domain is a name or term that indicates on what premise the scope or boundaries of the system are defined. This could be a business domain (e.g. Marketing) or a technical domain (e.g. Database Layer). In this handbook we refer to this as Technical and Domain partitioning, telling on how we define our boundaries of our systems(s).\nDomain-Driven-Design (DDD) has a concept of \u0026ldquo;Bounded Context\u0026rdquo; that is meant to aid in defining your domain, which should indicate how the boundaries are defined.\nSome Clarifications # Elements in Systems Thinking are Components in Software Systems. Many Components in a Software Systems can be software systems in their own right. Components are interconnected - meaning - they can communicate. The (software) domain usually refers to a system\u0026rsquo;s specified boundary. The pattern or philosophy that a system software is structured Software systems and information systems will be used interchangeably. Architecture Properties # Architecture Style is the overarching philosophy that: Guides the structuring and partitioning of the software system and its components. Guides the preferred integration (architecture) patterns between the components of the software system. Guides the preferred integration (architecture) patterns between the software system and other external software systems. Targets certain architecture characteristics. Architecture Characteristics: describes entire software system\u0026rsquo;s behavior. One would aim to target a specific set of desired characteristics that accommodates your system\u0026rsquo;s needs. Architecture Fields # Application Architecture focuses on designing and deciding upon the individual components of the system. Integration Architecture focuses on the flows and communication between these components. Data Architecture focuses on the content residing within these components and the information that moves through the system\u0026rsquo;s flows and communications. Evolutionary Architecture focuses on how the constant changes over time to a software system can be best handled, without eroding your architecture and desired architecture characteristics. Laws Of Architecture # See Topic: Laws Of Software Architecture\nDoing Architecture # When \u0026ldquo;doing architecture\u0026rdquo; as a software architect you should:\nUnderstand the current architecture, which current architecture style(s) it has, and its current architecture characteristics. Understand the future goals of the organization and its information system(s). Define a clear target state of the architecture, which target architecture style(s) it should have, and its desired architecture characteristics that accommodate the future goals of the organization. Define a roadmap from the current to target architecture. Govern the transition/process from the current to the target architecture. Use Architectural Decisions for implementation rules. Use Design Principles for implementation guidance. Make Development Teams Effective Obtain feedback during the transition/process and refine your roadmap and target architecture as you learn. Coach and mentor people on the transition/process journey. Topics # Anti-Patterns Architectural Thinking Architecture Decisions Architecture Risk Best Practices Clean Architecture Components Conways Law Domain-Driven-Design Diagramming and Presenting Architecture Evolutionary Architecture Feature Toggles How To Do\u0026hellip; Making Development Teams Effective Negotiation and Leadership Skill Laws Of Software Architecture Modules Software Architect Role Systems Thinking Team Topologies Useful # Resources Thought Leaders Nuggets Of Wisdom that contain some good wisdom. Copyright # This handbook is from my experience and many materials that I have read. My intention is to clarify on every topic I cover my sources that I have used, it can be in my own words, it can be sometimes copied from any of my sources. My apologies if I failed to do so, please contact me (via a PR on this GitHub Repo, great for transparency) if I did fail to do so. I obviously don\u0026rsquo;t take credit for when I quote source material and you should proceed with caution if you want to reuse these.\nTodo # Here you can find my raw todo notes on all topics that I plan to address in this handbook.\nOthers # "},{"id":21,"href":"/software-design/","title":"Index","section":"Knowledgebase","content":" Design Patterns # Design patterns are battle proven (most of them) solutions to common problems that developers face on daily base. Knowing many help you solve problems in a clean, efficient way. The solutions might be a big complex when you look at the code for the first time and you are not familiar with given pattern. Knowing multiple patterns help you recognize applied patterns, think more abstract about your code and solve your problems in a clean and efficient way.\nOpposed of design patterns, there are also antipatterns. Meaning, known patterns that are applied but are known to be a bad practice. Knowning these helps you identify issues in the code and keeps you from implementing a bad solution to your problem.\nOur design patterns can be grouped in groups that target a certain set of problems. The main types of patterns are:\nCreational patterns Structural patterns Behavioral patterns Patterns can be applicable on small units of code or also on architectural level. This does not always work out for every pattern, but often there might be derived patterns for architectural level from their code unit equivalents.\nCriticism # There has been a lot of criticism about (various) design patterns that they encourage wrong solutions. It goes without a saying that patterns are rather guidelines and a source to challenge your solutions on a more abstract level. Design patterns are not the holy gray but knowing some will help you shape your own opinion and skills to solve problems more efficiently and better abstract thinking. More can be found here.\nGeneral principles # In many sitations the use of the new keyword for creating an object is abstracted away to a single function that \u0026ldquo;creates\u0026rdquo; instances. The idea is the code should be unaware of which concrete class should be used. This would result in a single place in the code base to change the concrete class being used in the entire solution. (e.g. I have a IDataStore interface, and I have a MongoDB implementation and a MySQL implementation, if we want to be able to change the implementation easily, then we should preferably only change one line of code instead of all the instantiation statements) Patterns can be complementary, so you could use several different patterns on solving the same problem. Patterns # Creational patterns # In software engineering, creational design patterns are design patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. The basic form of object creation could result in design problems or added complexity to the design. Creational design patterns solve this problem by somehow controlling this object creation.\nAbstract Factory # Group factory functions semantically together that instantiates concrete classes that are closely related to each other.\nWhen we like to avoid using the new keyword where possible, the abstract factory, unlike just a regular factory, the abstract factory instantiates the concete classes which are related to each other.\nLet\u0026rsquo;s say we have the classes CPU and GPU, which we would like to fetch from our OS. As our application is (presumed in this example) OS agnostic, the concrete class with logic on how to interact with the CPU and GPU would differ based on the underlying OS.\nThe idea is to have a factory (e.g. HardWareInterfaceFactory) that can create the proper CPU and GPU concrete classes depending on the OS that the application is running.\n// Abstract classes class CPU {...} class GPU {...} // CPU concrete classes class MacOsCPU : CPU{...}; class WindowsOSCPU : CPU{...} // GPU concrete classes class MacOsGPU : GPU{...}; class WindowsOSGPU : GPU {...} // OS specific abstract factories class MacOsHardWareInterface : HardWareInterfaceFactory { public CPU createCpu() { return new MacOsCPU() }; public CPU createGpu() { return new MacOsCPU() }; } class WindowsHardWareInterface : HardWareInterfaceFactory { public CPU createCpu() { return new WindowsOSCPU() }; public CPU createGpu() { return new WindowsOSGPU() }; } // Generic abstract factory that brings all factories together abstract class HardWareInterfaceFactory{ // This returns the proper instance for given OS static HardWareInterfaceFactory getFactoryForOs(os){ if(os == \u0026#39;macos\u0026#39;){ return new MacOsHardWareInterface(); }else if(os == \u0026#39;windows\u0026#39;){ return new WindowsHardWareInterface(); }else{ throw new Exception(\u0026#39;OS not supported\u0026#39;); } } // Here we define the function signature that each HardWareInterface should have. abstract CPU createCpu(); abstract GPU createGpu(); } // usage var factory = HardWareInterfaceFactory.getFactoryForOs(\u0026#34;windows\u0026#34;); var cpu = factory.createCpu(); ... happy instantiation ... Builder # When you have a certain process, that always executes the same steps, but each step might need another input depending what you try to achieve, the builder pattern is a good approach. We create an abstract class that will be the \u0026ldquo;builder\u0026rdquo; and dictates which steps should be executed. Then you can use concrete builders that know what inputs are required for a given desired output.\nThis works well when you have a well \u0026ldquo;defined\u0026rdquo; business process but takes different inputs depending on what deriative it is from the business process. Like you have the \u0026ldquo;purchase\u0026rdquo; busines process. One can happen in the brick and mortar shop and on the online shop. The business process will be the same, but you might get inputs in a different way.\nLet\u0026rsquo;s say we have query builder for MongoDB and MySQL.\n// The query is an output that we desire from our builder, ALWAYS class query { public String queryString {get; set} } // We define here what steps it requires to build a query. class AbstractQueryBuilder { abstract void setCollectionName(string collectionName); abstract void setId(string id); abstract string getQuery(); } // Now we can make a builder for SQL class SQLQueryBuilder : AbstractQueryBuilder{ private Query query = new Query(); public void setCollectionName(string collectionName){ query.queryString += \u0026#39; FROM \u0026#39; + collectionName; } public void setId(string id){ query.queryString = \u0026#39;SELECT\u0026#39; + id + query.queryString; } } // Now we can make a builder for MongoDb class MongoDBQueryBuilder : AbstractQueryBuilder{ private Query query = new Query(); public void setCollectionName(string collectionName){ query.queryString += \u0026#39;.collection(\u0026#39; + collectionName + \u0026#39;)\u0026#39;; } public void setId(string id){ query.queryString = \u0026#39;.findOne({ id: \u0026#39; + id + \u0026#39;})\u0026#39;; } } // Now we have the director of the process class DataFetcher { private AbstractQueryBuilder queryBuilder; public(AbstractQueryBuilder queryBuilder){ this.queryBuilder = queryBuilder; } public Data fetch(string id, string collectionName){ queryBuilder.setId(id); queryBuilder.setCollectionName(collectionName); // execute query from queryBuilder.query return data; } } // Using it var dataFetcher = new DataFetcher(new SQLQueryBuilder()); dataFetcher.fetch(\u0026#34;100\u0026#34;, \u0026#34;users\u0026#34;); Other example\nFactory Method # The classic example of where we want to hide the new keyword and decide dynamically or only in one place which concrete class we might want to return for further usage.\ninterface IDbStore {}; class MongoDb : IDbStore {}; class MySQL : IDbStore {}; static class DBStoreFactory{ static public IDbStore getDbStore(){ // Return based on a config or some business logic the MongoDb or SQL instance. } } Object pool # Object pooling can offer a significant performance boost; it is most effective in situations where the cost of initializing a class instance is high, the rate of instantiation of a class is high, and the number of instantiations in use at any one time is low. (aka resource pools).\nSo if initializing a class is expensive, happens a lot but don\u0026rsquo;t use many instances at the same time, we want to reuse instances.\nA good example would be a DB Connection Pool. There are a few connections in the pool, to create a connection, is IO expensive. We might wanna fetch data all over the application, but we might not be using the connections so much all the time, so we create a pool of connections, so we can pick up an unused connection when a data fetch is required.\nUsually there will be a max pool size. The pool is responsible to orchestrate the lock/acquiring of a pool object and releasing it for reuse.\nSingleton # There is only one instance allowed to be used. So you create a function that returns always the same instance, and initializes one of it was not initialized before.\nThis initialization can be done at startup or lazy wise, only untill the first instance is requested.\n// Lazy class MyClass { private MyClass myInstance; private MyClass(){ // PRIVATE CONSTRUCTOR } static getInstance(){ if(myInstance == null){ this.myInstance = new MyClass(); } return this.myInstance ; } }; Important to take in mind when multithreading is happening, in that case you should add the extra safeguarding code to be thread safe.\nStructural patterns # In Software Engineering, Structural Design Patterns are Design Patterns that ease the design by identifying a simple way to realize relationships between entities.\nAdapter # The adapter is basically a wrapper so it \u0026ldquo;connects\u0026rdquo; nicely between two parts that else mismatch. A typical example is when you use a 3th party library in your solution, but how it works and the view of the world differes from yours and your code. So if you have a GitApiClient module published by Git, you would want it to wrap it so it behaves and interacts how you would want it to interact in your application. So you create a wrapper around it so it has the API that you desire and that is adapted to your code base.\nBridge # Decouple an abstraction from its implementation so that the two can vary independently.\nWe would use this pattern to solve a hectic hierarchical iheritance issue.\nLet\u0026rsquo;s say we have a Logger. And we want to have two types of loggers, a BatchLogger and a SimpleLogger. The SimpleLogger writes out a log entry to the STDOUT when it\u0026rsquo;s called. The BatchLogger accumulates a min amount of log entries before it writes it away to the STDOUT.\nWe would just create a ILogger interface and then the SimpleLogger and BatchLogger implementation.\nBut now we want to be able to log not only to STDOUT but alternatively to a API endpoint instead. Now we would have to create an API and STDOUT version of each logger. Resulting in ApiBatchLogger,StdOutBatchLogger, ApiSimpleLogger and StdOutSimpleLogger. Notice how this hierarchy becomes a mess and deep. We create more inheritance just because we have code that doesn\u0026rsquo;t move in parallel and rather orthogonally.\nHow do we solve this? This reminds us a bit of preffer composition over inheritance idea. Let\u0026rsquo;s rewrite our code.\nWe move the log to ... logic out of the hierarchy and move it to something separate. Let\u0026rsquo;s call it a LogGateway interface. Now we can have the SimpleLogger and BatchLogger take a LogGateway interfaces as reference. Now we end up with SimpleLogger, BatchLogger, ApiLogGateway, and StdOutLogGateway. Now we don\u0026rsquo;t need to implement a new logger based on the fact if it\u0026rsquo;s simple or batch AND for each given gateway we wanne use to write the logs to. Rearranging our inheritance so that we don\u0026rsquo;t end up with deep inheritance hierarchies and we can rather take the benefit of composition.\nDecorator # Attach additional responsibilities to an object dynamically.\nYou wrap the call to a function but then decorate it with extra behaviour. So you can add \u0026ldquo;optional\u0026rdquo; decorators that will execute additional logic on top of the share logic.\nThis can be done dynamically at runtime.\n// 1. \u0026#34;lowest common denominator\u0026#34; interface Widget { void draw(); } // 3. \u0026#34;Core\u0026#34; class with \u0026#34;is a\u0026#34; relationship class TextField implements Widget { private int width, height; public TextField(int width, int height) { this.width = width; this.height = height; } public void draw() { System.out.println(\u0026#34;TextField: \u0026#34; + width + \u0026#34;, \u0026#34; + height); } } // 2. Second level base class with \u0026#34;isa\u0026#34; relationship abstract class Decorator implements Widget { // 4. \u0026#34;has a\u0026#34; relationship private Widget widget; public Decorator(Widget widget) { this.widget = widget; } // 5. Delegation public void draw() { widget.draw(); } } // 6. Optional embellishment class BorderDecorator extends Decorator { public BorderDecorator(Widget widget) { super(widget); } public void draw() { // 7. Delegate to base class and add extra stuff super.draw(); System.out.println(\u0026#34; BorderDecorator\u0026#34;); } } // 6. Optional embellishment class ScrollDecorator extends Decorator { public ScrollDecorator(Widget widget) { super(widget); } public void draw() { super.draw(); // 7. Delegate to base class and add extra stuff System.out.println(\u0026#34; ScrollDecorator\u0026#34;); } } public class DecoratorDemo { public static void main(String[] args) { // 8. Client has the responsibility to compose desired configurations Widget widget = new BorderDecorator(new BorderDecorator(new ScrollDecorator(new TextField(80, 24)))); widget.draw(); } } Outputs\nTextField: 80, 24 ScrollDecorator // Aditional logic executed beside the original core one BorderDecorator // Aditional logic executed beside the original core one BorderDecorator // Aditional logic executed beside the original core one So we dynmically added extra code to be excuted on top of the core functionality.\nFacade # A facade is just a layer that hides all the sub systems or components being called. A good example of that is when you create a library which has internally differen util classes and services. But then you create on \u0026ldquo;facace\u0026rdquo; that will expose the methods that only need to be exposed to the user of this library, while internally the methods are spread into smaller sub components.\nThis way you encapsulate the internal workings and structure of the library.\nFlyweight # The Flyweight uses sharing to support large numbers of objects efficiently. Modern web browsers use this technique to prevent loading same images twice. When browser loads a web page, it traverse through all images on that page. Browser loads all new images from Internet and places them the internal cache. For already loaded images, a flyweight object is created, which has some unique data like position within the page, but everything else is referenced to the cached one.\nProxy # Like all proxies, you pust sugorate in between so you can add additional logic and take control, so the real target object is protected from additional complexity. Perfect also to create aspects and such.\nBehavioral patterns # In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication\nChain of responsibility # The pattern chains the receiving objects together, and then passes any request messages from object to object until it reaches an object capable of handling the message. The number and type of handler objects isn\u0026rsquo;t known a priori, they can be configured dynamically. The chaining mechanism uses recursive composition to allow an unlimited number of handlers to be linked.\nChain of Responsibility simplifies object interconnections. Instead of senders and receivers maintaining references to all candidate receivers, each sender keeps a single reference to the head of the chain, and each receiver keeps a single reference to its immediate successor in the chain.\nCommand # Encapsulate a request as an object, thereby letting you parametrize clients with different requests, queue or log requests, and support undoable operations.\nBasically put all the data required to run a command in an object. Pass this on so dynamically a proper command handler can execute the command.\ninterface ICommand { void execute(); } var queue = new List\u0026lt;ICommands\u0026gt;{...}; queue.execute(); Iterator # Hide the underlying logic and complecity for getting the next value.\nMediator # Design an intermediary to decouple many peers. Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.\nPartitioning a system into many objects generally enhances reusability, but proliferating interconnections between those objects tend to reduce it again. The mediator object: encapsulates all interconnections, acts as the hub of communication, is responsible for controlling and coordinating the interactions of its clients, and promotes loose coupling by keeping objects from referring to each other explicitly.\nGoal is to remove direct/explicit relations between different objects types.\nThe Mediator defines an object that controls how a set of objects interact. Loose coupling between colleague objects is achieved by having colleagues communicate with the Mediator, rather than with each other. The control tower at a controlled airport demonstrates this pattern very well. The pilots of the planes approaching or departing the terminal area communicate with the tower rather than explicitly communicating with one another. The constraints on who can take off or land are enforced by the tower. It is important to note that the tower does not control the whole flight. It exists only to enforce constraints in the terminal area.\nMemento # Without violating encapsulation, capture and externalize an object\u0026rsquo;s internal state so that the object can be returned to this state later.\nBasically we want to be able to do undo or rollback. So we keep snapshots/deltas of the changes we make so we can return a specific state later.\nIt\u0026rsquo;s like the following\nclass TheWorld { setSnapshot(); createSnapShot(); } class TheWorldMoment{ getState(); setState(); } var world = new TheWorld(); // Do changes ... var snapshot1 = world.createSnapShot(); // Do changes ... var snapshot2 = world.createSnapShot(); // Restore to state since we took snapshot 1 world.setSnapshot(snapshot1); Null Object # The null object pattern is perfect to get rid of all this defensive coding with if returnValue == null and such.\nInstead of returning a null from a (e.g. factory) function, you can return an object that implements certain interface or abstract class, but does nothing. So basically doing a silent \u0026ldquo;no-operation\u0026rdquo; or anything similar like that.\nIt is sometimes thought that Null Objects are over simple and \u0026ldquo;stupid\u0026rdquo; but in truth a Null Object always knows exactly what needs to be done without interacting with any other objects. So in truth it is very \u0026ldquo;smart.\u0026rdquo;\nThe Null Object class is often implemented as a Singleton to save memory as it\u0026rsquo;s stateless anyway. Observer # Idea is that you have a Observable with zero, one or more Observers. If the state changes in the Observable, it will notify all Observers. Usually with this pattern the Observable keeps a list/references of all Observers, so this is create a thight coupling of awareness, consider a pub/sub mechanism if you want to create a more loosely coupled approach where the observers and obserables are unaware of each other.\nState # Intersting, so instead of changing behaviour purely based on changing state in an object, we will create an abstract class, and each subclass will represent an allowed state. (Use polymoprhism instead of ENUMS/Constants). This is one way !\nEverytime you have a finite state machine, evaluate this pattern. The State pattern does not specify where the state transitions will be defined. The choices are two: the \u0026ldquo;context\u0026rdquo; object, or each individual State derived class. The advantage of the latter option is ease of adding new State derived classes. The disadvantage is each State derived class has knowledge of (coupling to) its siblings, which introduces dependencies between subclasses.\nState objects are often Singletons. Flyweight explains when and how State objects can be shared. Strategy # Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from the clients that use it.\nThis is perfect when you have algorithms that work perfect for a specific size of data set. This is basicaly the core Open/Closed principle of the SOLID. Define one Interface/Abstract class, and have different implementations that have a different strategy.\nTemplate method # Define the skeleton of an algorithm in an operation, deferring some steps to client subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm\u0026rsquo;s structure.\nBase class declares algorithm \u0026lsquo;placeholders\u0026rsquo;, and derived classes implement the placeholders.\nThis use used more than you think. Think of VueJS where you have \u0026ldquo;hooks\u0026rdquo;. There is a strict process, but you can overwrite or append within a specific atomic step.\nThis is typicall to have a root class BusinessProcess, which has methods stepA(), stepB(), and `stepC() and then you can subclass it and optionally choose with step you want to override with your own logic.\nAnother example is : Kind of basic inheritance.\n\u0026ldquo;the Hollywood principle\u0026rdquo; - \u0026ldquo;don\u0026rsquo;t call us, we\u0026rsquo;ll call you\u0026rdquo;.\n"},{"id":22,"href":"/software-development-process/","title":"Index","section":"Knowledgebase","content":" Software Development # Internal Open Source DORA Metrics # Source Trunk Based Development # Why Pull Requests Are A BAD Idea Suggested Alternative for Code Review: Pair Programming "},{"id":23,"href":"/software-testing/","title":"Index","section":"Knowledgebase","content":" Software Testing # Behavior Driven Testing # BDD is a mindset, philosophy on how to better explain do TDD. TDD can go wrong by focusing on coverage and tests that are hard to read. BDD gives an extra layer that takes the angle of the end user, not you, the creator, and explains on the high level how a feature or scenario should go. BDD is the layer or \u0026ldquo;What to test (a flow/feature/scenario)\u0026rdquo; Underneath there is the code on \u0026ldquo;how to test\u0026rdquo; this flow/feature/scenario, this is an implementation detail that can change over time. Any good test should rather say what it tests, than how, just like when writing code. A good TDD approach would actually look like BDD, tools like gherkin and SpecFlow are not a must, you can technically write just clearer tests that follow this philosophy. Remember, BDD was to help avoid misunderstandings about TDD. So they are not mutually exclusive and rather complementary. Tests that are about \u0026ldquo;how to test\u0026rdquo; you are structured are easier to maintain, if the implementation changed of the design, the test still indicates what it intends to test. BDD is a flavour to TDD one could argue. Resources # Guide to BDD TDD vs BDD "},{"id":24,"href":"/statistics/","title":"Index","section":"Knowledgebase","content":" Statistics # Statistics (or statistical analysis) is a lot like good detective work. The data yields clues and patterns that can ultimately lead to meaningful conclusions.\nWhy statistics # This allows to determine answers to questions which are not economical to answer. You can not count every homeless in a country, thats expensive and time consuming. You can take a small quality sample (quality is key!) to then interfere or project the probably number.\nEven in best of circumstances, statistical analysis rarely unveils \u0026ldquo;the truth\u0026rdquo;. We are usually building circumstantial based based on imperfect data. As a result, there are numerous reasons that intellectually honest people may disagree about statistical results or their implications.\nStatistics can give some insight who the best baseball player is, but that\u0026rsquo;s not perse what makes up being \u0026ldquo;the best\u0026rdquo;, cause there is no objective definition of what a \u0026ldquo;the best baseball player\u0026rdquo; means.\nSmart and honest people will often disagree about that data re trying to tell us.\nWhy Learn? # To summarize huge quantities of data. To make better decisions. To answer important social questions. To recognize patterns that can refine how we do everything from selling diapers to catching criminals. To evaluate the effectiveness of policies, programs, drugs, medical procedures, and other innovations. To spot those who use statistics for nefarious ends (and lying). Basic Experiments # In a good experiment you have \u0026ldquo;one variable\u0026rdquo; that differs between your \u0026ldquo;experiment group\u0026rdquo; and your \u0026ldquo;control group\u0026rdquo;. The control group shares everything with the experiment group, except for one variable. For example, the experiment group eats everyday 1 apple, and the other group eats everyday 1 pear.\nStatistical Significance # The analysis has uncovered an association of 2 variables that ia not likely to be product of chance alone. Regression analysis can for example find a relation between 2 variables and how likely that relationship is by accident or not. If there is a relationship, and it doesn\u0026rsquo;t seem very accidental, it\u0026rsquo;s statistically significant.\nRegression Analysis # The tool to isolate the relationship between to variables, such as smoking and cancer, while holding constant (or \u0026ldquo;controlling for\u0026rdquo;) the effects of other important variables (such as diet, exercise, weight, \u0026hellip;)\nRegression analysis is primarily used to assess the strength and nature of relationships between variables, but it does not directly establish causation. This is also the limitation, we can identify strong relationships, but we cant determine causality, or in other words \u0026ldquo;WHY?\u0026rdquo;.\nUsually you start with a hypotheses, \u0026ldquo;I think these 2 variables have a relationship\u0026rdquo; and then use regression analysis to validate that hypothesi.\nExample # The Conclusion # Eating a bran muffin every day will reduce your chances of getting colon cancer.\nThe Methodology # First they gather detailed information on thousands of people, including how frequently they eat brand muffin\u0026rsquo;s and then apply regression analysis:\nQuantify the association observed between eating bran muffins and contracting colon cancer. E.g. Hypothetical finding that people who eat bran muffins have 9% lower incidence of colon cancer, controlling for the other factors that may affect the incidence of the disease. Quantify the likelihood that the association (relation) between bran muffin\u0026rsquo;s and a lower rate of colon cancer observed is merely a coincidence (a quick in the data for this sample of people), rather than a meaningful insight about the relationship between diet and health. Descriptive Statistic (aka Summary Statistic) # A simplification of a complex data set or array of data. We perform calculations that reduce a complex array of data into a handful of numbers that describe those data. These descriptive statistics give us a manageable and meaningful summary of the underlying phenomenon. But simplification invites abuse.\nExamples Descriptive Statistic:\nThe health of the Belgian middle class Olympic gymnastics performance Statistical Measures # The Mean # What most people understand as \u0026ldquo;average\u0026rdquo;, although, more specific its the Arithmetic Mean that most people assume what is referred to.\nThe Median # What is the middle value? 50% of values are below and 50% of values are above the median.\nThe median is the middle value in a dataset when the data points are arranged in ascending or descending order. If there is an even number of observations, the median is the average of the two middle numbers. The median is useful when the data has outliers or is skewed, as it is not affected by extreme values. The Mode # For what value is the highest concentration? Let\u0026rsquo;s say, there is no bigger group than the group that earns 5000 EUR.\nThe mode is the value that appears most frequently in a dataset. A dataset can have more than one mode (bimodal, multi-modal) if multiple values appear with the same highest frequency. The mode is particularly useful for categorical data where we wish to know which is the most common category. Percentiles # Tells you what percentage of a dataset falls below a certain point.\nFor example:\nIf you\u0026rsquo;re in the 90th percentile in a test, that means you scored higher than 90% of the people who took the test. Similarly, if a value is at the 25th percentile, it means that 25% of the data points are below that value.\nThe 50th percentile is also known as the median, meaning half the data is below it and half is above.\nStandard Deviation # How spread out the values in a dataset are from the mean (average). It measures the dispersion of the values.\nIf the standard deviation is small, it means the data points are close to the mean, or the values are clustered tightly around the average. If the test scores in a class have a small standard deviation, most students scored around the same as the average score. If the standard deviation is large, it means the data points are more spread out, or the values vary widely from the average. If the standard deviation is large, students\u0026rsquo; scores vary a lot—some did much better or worse than the average. P-Valu # What’s a p-value? # A p-value helps you decide if something you’re testing in an experiment is just a coincidence or if it’s likely a real effect. It’s basically a number that tells you how surprising your results are if the thing you’re testing isn’t actually doing anything.\nImagine this: # Let’s say you’re flipping a coin, and you think the coin might be biased (like maybe it lands on heads more than tails). Normally, a fair coin should land on heads 50% of the time and tails 50% of the time, right?\nNow, you flip the coin 10 times and get 8 heads. This seems like a lot of heads, but before saying the coin is unfair, you want to know: “Could this just happen by chance?”\nHere’s where the p-value comes in: # The p-value is a number that answers the question: If the coin is really fair (no bias), how likely would it be to get 8 heads (or something even more extreme)? If the p-value is very small (like 0.01 or 0.001), it means getting 8 heads (or more) by pure chance would be very rare if the coin were truly fair. So you’d suspect the coin might actually be biased. If the p-value is bigger (like 0.3 or 0.5), it means getting 8 heads could easily happen just by chance, and there’s no good reason to think the coin is unfair. How do you use it? # Scientists pick a cutoff number (usually 0.05) to decide:\nIf the p-value is smaller than 0.05, you say: “This is unlikely to be a coincidence. There might be something real happening here,” and you reject the idea that the coin is fair. If the p-value is bigger than 0.05, you say: “This could easily be a coincidence,” and you don’t reject the idea that the coin is fair. In short: # Small p-value (like 0.01): Your results are surprising, and something interesting might be going on. Big p-value (like 0.3): Your results aren’t surprising, and it could just be random chance. Hope that makes it clearer! Let me know if you need more examples. :)\nHow to Lie with statistics # The Sample With the Built-In Bias # When there is a poll or statistic, one must scrutinize the sample which was used to calculate the statistic. Getting an unbiased sample is extremely hard or near to impossible?\nExample: The avg salary of a Yale student of the 1924 graduate is now earning 25000 Dollar/Year. Did they send a questionnaire to all students (did they have their address), maybe those who they don\u0026rsquo;t have the address of are the super successful, or they all passed away and so on. Next, those with known addresses are now already a biased set that might miss out on significant higher or lower earners. How many respond? Maybe 10% ? What differentiates the onces who feel like responding from the others? When they do respond, are they being honest. People dare to lie , a lot, on questionnaires, interviews and poll. Consciously or subconsciously.\nJust going on the street and interview people is biased, based on the place, time and maybe who the interviewers feels attracted to.\nA purely random sample is hard, almost impossible to come by. Ask yourself how a sample can be biased.\nThe Well Chosen Average # There are different types of averages that one can \u0026ldquo;conveniently\u0026rdquo; use and not lie.\nThe Mean: What most people understand as \u0026ldquo;average\u0026rdquo;, although, more specific its the Arithmetic Mean that most people assume what is referred to. The Mean has 3 variations again: Arithmetic: Geometric: Harmonic: The Median: What is the middle value? 50% of values are below and 50% of values are above the median. The median is the middle value in a dataset when the data points are arranged in ascending or descending order. If there is an even number of observations, the median is the average of the two middle numbers. The median is useful when the data has outliers or is skewed, as it is not affected by extreme values. The Mode: For what value is the highest concentration? Let\u0026rsquo;s say, there is no bigger group than the group that earns 5000 EUR. The mode is the value that appears most frequently in a dataset. A dataset can have more than one mode (bimodal, multi-modal) if multiple values appear with the same highest frequency. The mode is particularly useful for categorical data where we wish to know which is the most common category. When there is a perfect bell shape distribution, these 3 types of averages would have the exact same value. If the distribution has another shape, these can be widely different and misleading. How these 3 differ exactly from each other, tells something about the distribution.\nDistributions # Distributions describe the pattern of data points. Distributions can be of any shape, but there are a few key types.\nNormal: Bell Shaped and symmetric around the mean Skewed: Higher concentration on one end or the other. Left / Negative Skew: Long tail on the left. Most data points concentrated on the right side. Right / Positive Skew: Long tail on the right. Most data points concentrated on the left side. Bimodal: There are 2 peaks (modes) instead of one. Multi-modal: More than 2 peaks. Uniform: All outcomes are equally likely. Exponential: Right skewed with rapid decrease in frequency as you move away from the mode. And many more, here are some visualizations of them Set 1 Set 2 Set 3 Extra Average Types # Weighted Mean accounts for varying significance of data points. Trimmed Mean reduces the influence of outliers. Calculated by removing a certain percentage of the smallest and largest data points before calculating the arithmetic mean. Midrange offers a basic central value but is not robust against outliers. The average of the maximum and minimum values in a dataset. It provides a simple measure of central tendency but is highly sensitive to outliers. Formula: (Max Value + Min Value) / 2 Critically think about statistics # Following are some types on how to analyze critically any statistics.\n(Who Says So) Look for bias: A laboratory with something to prove for the sake of a theory, reputation or a fee. A newspaper whose aim is a good story. Conscious bias: Direct misstatement or ambiguous statements that serves well and cannot be \u0026ldquo;convicted\u0026rdquo;. E.g. Selecting favorable data (dentist company retrying till they have a study with favorable results) E.g. Favorable measure (use mean instead of a median or \u0026hellip;. when they just say \u0026ldquo;average\u0026rdquo;) Unconscious bias: By using \u0026ldquo;big names\u0026rdquo; like \u0026ldquo;cornel university\u0026rdquo; but then the conclusion was from the writer, not from the referenced study. (How Does he know?) Biased Samples: The sample which was used can be biased, if a questionnaire is sent out and only 10% responses, this creates a very real risk that the sample is biased. Reported correlation: Is the correlation big enough to have meaning? Is it significant enough? (What\u0026rsquo;s missing) What key data, information or context is missing from provided information? Is this a mean, median or mode average? What is the probable error or standard error What is the distribution? Bigger picture data ? e.g. This week the deaths was 60% than average, but maybe that\u0026rsquo;s normal ? Seasonal peaks ? Context and distribution and past trends might be missing to contextualize it. (Did somebody change the subject) Switch somewhere between the raw figure and the conclusion. Confusion between one thing and the other. E.g. More reported cases of a disease is not the same as more cases of the disease. Reporting could have been bad before or lacking. So it can be easily \u0026ldquo;switched\u0026rdquo; to give the wrong impression. What people \u0026ldquo;say or report\u0026rdquo; is not perse the same as \u0026ldquo;what they actually do\u0026rdquo;. They might not be enough self aware of their actual behavior or they lie to present themselves etc\u0026hellip; Risk with self reporting. E.g. The price for a prison is more than the price of a luxury hotel. Well you switch here between the rent you pay versus the TOTAL MAINTENANCE COST of a prison cell. \u0026ldquo;Be the first in\u0026rdquo; can be done very easy, if you make it unique enough. (e.g. hottest 2nd of June since 1948) Switch between revenue and net profit casually (Does it make sense?) I guess, look at the context, life expectancy will be very different based on your birth date. Therefore OVerly specific numbers for a mean can be misleading, as it might give wrong sense of accuracy. E.g. A person needs 100$ to have enough food to survive, so we only give 100$ unemployment support. There are key things missing! Past trends might be facts, but future trends are just best estimate (like weather). Framing and misleading representations E.g. a map that colors all stated who have a certain crime rate, big states with low population can easily dominate the whole visualization. E.g. When the scales of a graph are trimmed or tweaked to make the shape look more impressive. A hypothesis as conclusion One can find a strong relationship in data (e.g. with regression analysis), but not the causality, so they then might draw up a hypotheses. You might mistake this as the actual \u0026ldquo;reason\u0026rdquo;, while it\u0026rsquo;s just \u0026ldquo;a hypothesis\u0026rdquo; to explain a statistically significant relationship. "},{"id":25,"href":"/usb-spec/","title":"Index","section":"Knowledgebase","content":" USB Spec and how it works # Here I summerize useful information on how USB works, this is a part of my research project to use a PS4 controller in the browser.\nTerms And Abbreviations # The extensive list can be found here.\nArchitectural Overview # Host-scheduled, token-based protocol.\nUSB System # 3 areas\nUSB interconnect (Manner which USB devices are connected and communicate with the host) Bus Topology Inter-layer relationships: In terms a capability stack, the USB tasks performed at each layer in the system. Data Flow Models: Manner in which data moves USB Schedule USB Devices USB host A USB device usually provides one or more \u0026ldquo;functions\u0026rdquo;.\nUSB Protocol # All communication happens through a POLLING mechanism. So the USB Bus Protocol is Poll oriented.\nMost bus transactions involve transmissions of up to 3 packets. Each transaction begins when the Host Controller, on a scheduled basis, sends a USB Token packet describing the:\nType of transaction Direction of transaction (IN or OUT) the USB device address Endpoint number The addressed USB device selects itself by decoding the appropriate address fields. (AH! That\u0026rsquo;s me!). The targeted device will then send a data packet or indicate if it has no data to transfer. The host will then reply witha handshake packet indicating if the transfer was successful.\nThe data transfer model between source and destination on the host and an endpoint is reffered to as a pipe.\nA pipe can be\nStream pipe (has no USB defined structure) Message pipe (has USB defined structure) One message pipe, the Default Control Pipe always exists once a device is powered. (used for device\u0026rsquo;s configuration, status and control information)\nThe Host assigns a unique USB address to a newly attached device and then determines if it\u0026rsquo;s a Device or Hub or a Function. Then the hosts establishes its end of the control pipe for the newly attached USB device using the assigned USB address and endpoint 0x0.\nIf the newly attached device is a hub with attached devices, the above procedure is followed for each of the attached USB devices.\nUSB Enumeration # Activity that identifies and assigns unique address to devices attached to a bus. This happens periodically and does the detection of removing and adding of devices.\nData Flow Types # Data and control change happens through a set of either uni-directional or bi-directional pipes. Transfer take place between host software and a particular endpoint on a USB device. The association between the Host Software and a USB device endpoint is a pipe. In general, data movement through one pipe is independent from the data flow of any other pipe.\nControl Transfer : USed to configure a device at attach time and can be used for other device-specific purposes, including control of other pipes on the device. Bulk Data Traansfers Generated or consumed in relatively large and bursty quantities and have wide dynamic latitude in transmission constraints. Interupt Data Transfer Used for timely but reliable delivery of data,. Isochronous Data Occupy a prenegotiated amount of USB Bandwidth with a prenegotiated delivery latency. Typically for real time consumption. As this is for real time, errors are often not corrected. A single pipe only supports one data flow type for any given device configuration.\nUSB Devices # Devices are divided into classes such as hub, human interface, printer, imaging or mass storage device.\nEach device is assigned an address when attached and enumerated. USB devices will have a designated pipe at endpoint 0x0 where to the *Default Control Transfer` pipe will be established. From the default control pipe we get the characteristics of a device:\nClass USB Vendor Standard Two major classes exist, hubs and functions. Functions provide capabilities to the host, hubs just more connections.\nA device can have multiple functions (like sound and video, like a webcam). Each function will have a configuration. Before function can be used, it MUST be configured by the host.\nUSB Data Flow Model # Protocol Layer # \u0026hellip; maybe others\n"},{"id":26,"href":"/wisdom/","title":"Wisdom","section":"Knowledgebase","content":" Wisdom # Best way to get feedback or an answer, by posting a wrong answer\nComparison is the mental thief of joy\nThe best thing you can do with a good reputation is squander it, because you can’t take it with you when you’re dead.\nYour problem and challenges are not unique - find others that solved it\nAlways assume good intent\nJust do it, don\u0026rsquo;t ask for permission, people will resist or take things from you away if you\u0026rsquo;re doing a bad job.\nDefine the role you want, don\u0026rsquo;t fill in that they say.\nA talent for following the ways of yesterday, is not sufficient to improve the world of today King Wuling 307 BC\n“a lie can travel halfway around the world while the truth is still putting on its shoes”\nEasy and Fast is what allows for innovation.\nFocus on productivity first and portability second. If you\u0026rsquo;re not productive (and your competitors are), you\u0026rsquo;ll have nothing to port.\nBusiness plans that describe how you would capture a small slice of a vast market are the first ones to go into the trash bin. Instead, we look for ideas that serve one market better than anyone else in that market.\nThe best engineering metrics have 3 features:\nthere are multiple of them they\u0026rsquo;re in tension with each other they measure teams or the organization—not individuals Leadership / Influence # Usually, you might have good ideas, but listen to everyone first, then “hey, at least 3 of you said we should do x, what do you think?”. You might have planted some ideas before, (read how) but then make sure they feel they were part of the decision. This will give more buy in and conviction. Remember the expensive consultant example. An good consultant just surfaces the ideas of those who are there and know it without taking credit. Do a listening tour This is an example of a leader that pulls, instead of pushing (telling what to do). So pulling doesn’t mean “say what to do and then step along”, no.\n"}]